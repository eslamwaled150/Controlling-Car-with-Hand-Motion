
Hand_Module.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d50  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000005a  00800060  00000d50  00000dc4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000e1e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000e50  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000180  00000000  00000000  00000e8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002264  00000000  00000000  0000100c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000c01  00000000  00000000  00003270  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000f7e  00000000  00000000  00003e71  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000030c  00000000  00000000  00004df0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000d82  00000000  00000000  000050fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001540  00000000  00000000  00005e7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000110  00000000  00000000  000073be  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e5       	ldi	r30, 0x50	; 80
  68:	fd e0       	ldi	r31, 0x0D	; 13
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 3b       	cpi	r26, 0xBA	; 186
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <main>
  7a:	0c 94 a6 06 	jmp	0xd4c	; 0xd4c <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <HLCD_vidSendCommend>:
  82:	cf 93       	push	r28
  84:	c8 2f       	mov	r28, r24
  86:	60 e0       	ldi	r22, 0x00	; 0
  88:	89 e0       	ldi	r24, 0x09	; 9
  8a:	0e 94 de 02 	call	0x5bc	; 0x5bc <MDIO_vidWriteChannel>
  8e:	81 e0       	ldi	r24, 0x01	; 1
  90:	0e 94 60 03 	call	0x6c0	; 0x6c0 <MDIO_u8ReadPort>
  94:	8f 70       	andi	r24, 0x0F	; 15
  96:	9c 2f       	mov	r25, r28
  98:	90 7f       	andi	r25, 0xF0	; 240
  9a:	68 2f       	mov	r22, r24
  9c:	69 2b       	or	r22, r25
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	0e 94 72 03 	call	0x6e4	; 0x6e4 <MDIO_vidWritePort>
  a4:	60 e0       	ldi	r22, 0x00	; 0
  a6:	8b e0       	ldi	r24, 0x0B	; 11
  a8:	0e 94 de 02 	call	0x5bc	; 0x5bc <MDIO_vidWriteChannel>
  ac:	8f e8       	ldi	r24, 0x8F	; 143
  ae:	91 e0       	ldi	r25, 0x01	; 1
  b0:	01 97       	sbiw	r24, 0x01	; 1
  b2:	f1 f7       	brne	.-4      	; 0xb0 <HLCD_vidSendCommend+0x2e>
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <HLCD_vidSendCommend+0x34>
  b6:	00 00       	nop
  b8:	61 e0       	ldi	r22, 0x01	; 1
  ba:	8b e0       	ldi	r24, 0x0B	; 11
  bc:	0e 94 de 02 	call	0x5bc	; 0x5bc <MDIO_vidWriteChannel>
  c0:	8f e1       	ldi	r24, 0x1F	; 31
  c2:	9e e4       	ldi	r25, 0x4E	; 78
  c4:	01 97       	sbiw	r24, 0x01	; 1
  c6:	f1 f7       	brne	.-4      	; 0xc4 <HLCD_vidSendCommend+0x42>
  c8:	00 c0       	rjmp	.+0      	; 0xca <HLCD_vidSendCommend+0x48>
  ca:	00 00       	nop
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	0e 94 60 03 	call	0x6c0	; 0x6c0 <MDIO_u8ReadPort>
  d2:	90 e1       	ldi	r25, 0x10	; 16
  d4:	c9 9f       	mul	r28, r25
  d6:	90 01       	movw	r18, r0
  d8:	11 24       	eor	r1, r1
  da:	8f 70       	andi	r24, 0x0F	; 15
  dc:	68 2f       	mov	r22, r24
  de:	62 2b       	or	r22, r18
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	0e 94 72 03 	call	0x6e4	; 0x6e4 <MDIO_vidWritePort>
  e6:	60 e0       	ldi	r22, 0x00	; 0
  e8:	8b e0       	ldi	r24, 0x0B	; 11
  ea:	0e 94 de 02 	call	0x5bc	; 0x5bc <MDIO_vidWriteChannel>
  ee:	8f e8       	ldi	r24, 0x8F	; 143
  f0:	91 e0       	ldi	r25, 0x01	; 1
  f2:	01 97       	sbiw	r24, 0x01	; 1
  f4:	f1 f7       	brne	.-4      	; 0xf2 <HLCD_vidSendCommend+0x70>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <HLCD_vidSendCommend+0x76>
  f8:	00 00       	nop
  fa:	61 e0       	ldi	r22, 0x01	; 1
  fc:	8b e0       	ldi	r24, 0x0B	; 11
  fe:	0e 94 de 02 	call	0x5bc	; 0x5bc <MDIO_vidWriteChannel>
 102:	8f e3       	ldi	r24, 0x3F	; 63
 104:	9f e1       	ldi	r25, 0x1F	; 31
 106:	01 97       	sbiw	r24, 0x01	; 1
 108:	f1 f7       	brne	.-4      	; 0x106 <HLCD_vidSendCommend+0x84>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <HLCD_vidSendCommend+0x8a>
 10c:	00 00       	nop
 10e:	cf 91       	pop	r28
 110:	08 95       	ret

00000112 <HLCD_vidInit>:
 112:	60 e0       	ldi	r22, 0x00	; 0
 114:	89 e0       	ldi	r24, 0x09	; 9
 116:	0e 94 de 02 	call	0x5bc	; 0x5bc <MDIO_vidWriteChannel>
 11a:	60 e0       	ldi	r22, 0x00	; 0
 11c:	8a e0       	ldi	r24, 0x0A	; 10
 11e:	0e 94 de 02 	call	0x5bc	; 0x5bc <MDIO_vidWriteChannel>
 122:	61 e0       	ldi	r22, 0x01	; 1
 124:	8b e0       	ldi	r24, 0x0B	; 11
 126:	0e 94 de 02 	call	0x5bc	; 0x5bc <MDIO_vidWriteChannel>
 12a:	2f ef       	ldi	r18, 0xFF	; 255
 12c:	89 ef       	ldi	r24, 0xF9	; 249
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	21 50       	subi	r18, 0x01	; 1
 132:	80 40       	sbci	r24, 0x00	; 0
 134:	90 40       	sbci	r25, 0x00	; 0
 136:	e1 f7       	brne	.-8      	; 0x130 <HLCD_vidInit+0x1e>
 138:	00 c0       	rjmp	.+0      	; 0x13a <HLCD_vidInit+0x28>
 13a:	00 00       	nop
 13c:	83 e3       	ldi	r24, 0x33	; 51
 13e:	0e 94 41 00 	call	0x82	; 0x82 <HLCD_vidSendCommend>
 142:	82 e3       	ldi	r24, 0x32	; 50
 144:	0e 94 41 00 	call	0x82	; 0x82 <HLCD_vidSendCommend>
 148:	88 e2       	ldi	r24, 0x28	; 40
 14a:	0e 94 41 00 	call	0x82	; 0x82 <HLCD_vidSendCommend>
 14e:	86 e0       	ldi	r24, 0x06	; 6
 150:	0e 94 41 00 	call	0x82	; 0x82 <HLCD_vidSendCommend>
 154:	8c e0       	ldi	r24, 0x0C	; 12
 156:	0e 94 41 00 	call	0x82	; 0x82 <HLCD_vidSendCommend>
 15a:	08 95       	ret

0000015c <HLCD_vidSendChar>:
 15c:	cf 93       	push	r28
 15e:	c8 2f       	mov	r28, r24
 160:	61 e0       	ldi	r22, 0x01	; 1
 162:	89 e0       	ldi	r24, 0x09	; 9
 164:	0e 94 de 02 	call	0x5bc	; 0x5bc <MDIO_vidWriteChannel>
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	0e 94 60 03 	call	0x6c0	; 0x6c0 <MDIO_u8ReadPort>
 16e:	8f 70       	andi	r24, 0x0F	; 15
 170:	9c 2f       	mov	r25, r28
 172:	90 7f       	andi	r25, 0xF0	; 240
 174:	68 2f       	mov	r22, r24
 176:	69 2b       	or	r22, r25
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	0e 94 72 03 	call	0x6e4	; 0x6e4 <MDIO_vidWritePort>
 17e:	60 e0       	ldi	r22, 0x00	; 0
 180:	8b e0       	ldi	r24, 0x0B	; 11
 182:	0e 94 de 02 	call	0x5bc	; 0x5bc <MDIO_vidWriteChannel>
 186:	8f e9       	ldi	r24, 0x9F	; 159
 188:	9f e0       	ldi	r25, 0x0F	; 15
 18a:	01 97       	sbiw	r24, 0x01	; 1
 18c:	f1 f7       	brne	.-4      	; 0x18a <HLCD_vidSendChar+0x2e>
 18e:	00 c0       	rjmp	.+0      	; 0x190 <HLCD_vidSendChar+0x34>
 190:	00 00       	nop
 192:	61 e0       	ldi	r22, 0x01	; 1
 194:	8b e0       	ldi	r24, 0x0B	; 11
 196:	0e 94 de 02 	call	0x5bc	; 0x5bc <MDIO_vidWriteChannel>
 19a:	8f e1       	ldi	r24, 0x1F	; 31
 19c:	9e e4       	ldi	r25, 0x4E	; 78
 19e:	01 97       	sbiw	r24, 0x01	; 1
 1a0:	f1 f7       	brne	.-4      	; 0x19e <HLCD_vidSendChar+0x42>
 1a2:	00 c0       	rjmp	.+0      	; 0x1a4 <HLCD_vidSendChar+0x48>
 1a4:	00 00       	nop
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	0e 94 60 03 	call	0x6c0	; 0x6c0 <MDIO_u8ReadPort>
 1ac:	90 e1       	ldi	r25, 0x10	; 16
 1ae:	c9 9f       	mul	r28, r25
 1b0:	90 01       	movw	r18, r0
 1b2:	11 24       	eor	r1, r1
 1b4:	8f 70       	andi	r24, 0x0F	; 15
 1b6:	68 2f       	mov	r22, r24
 1b8:	62 2b       	or	r22, r18
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	0e 94 72 03 	call	0x6e4	; 0x6e4 <MDIO_vidWritePort>
 1c0:	60 e0       	ldi	r22, 0x00	; 0
 1c2:	8b e0       	ldi	r24, 0x0B	; 11
 1c4:	0e 94 de 02 	call	0x5bc	; 0x5bc <MDIO_vidWriteChannel>
 1c8:	8f e9       	ldi	r24, 0x9F	; 159
 1ca:	9f e0       	ldi	r25, 0x0F	; 15
 1cc:	01 97       	sbiw	r24, 0x01	; 1
 1ce:	f1 f7       	brne	.-4      	; 0x1cc <HLCD_vidSendChar+0x70>
 1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <HLCD_vidSendChar+0x76>
 1d2:	00 00       	nop
 1d4:	61 e0       	ldi	r22, 0x01	; 1
 1d6:	8b e0       	ldi	r24, 0x0B	; 11
 1d8:	0e 94 de 02 	call	0x5bc	; 0x5bc <MDIO_vidWriteChannel>
 1dc:	8f e3       	ldi	r24, 0x3F	; 63
 1de:	9f e1       	ldi	r25, 0x1F	; 31
 1e0:	01 97       	sbiw	r24, 0x01	; 1
 1e2:	f1 f7       	brne	.-4      	; 0x1e0 <HLCD_vidSendChar+0x84>
 1e4:	00 c0       	rjmp	.+0      	; 0x1e6 <HLCD_vidSendChar+0x8a>
 1e6:	00 00       	nop
 1e8:	cf 91       	pop	r28
 1ea:	08 95       	ret

000001ec <HLCD_vidSendString>:
 1ec:	0f 93       	push	r16
 1ee:	1f 93       	push	r17
 1f0:	cf 93       	push	r28
 1f2:	8c 01       	movw	r16, r24
 1f4:	c0 e0       	ldi	r28, 0x00	; 0
 1f6:	03 c0       	rjmp	.+6      	; 0x1fe <HLCD_vidSendString+0x12>
 1f8:	0e 94 ae 00 	call	0x15c	; 0x15c <HLCD_vidSendChar>
 1fc:	cf 5f       	subi	r28, 0xFF	; 255
 1fe:	f8 01       	movw	r30, r16
 200:	ec 0f       	add	r30, r28
 202:	f1 1d       	adc	r31, r1
 204:	80 81       	ld	r24, Z
 206:	81 11       	cpse	r24, r1
 208:	f7 cf       	rjmp	.-18     	; 0x1f8 <HLCD_vidSendString+0xc>
 20a:	cf 91       	pop	r28
 20c:	1f 91       	pop	r17
 20e:	0f 91       	pop	r16
 210:	08 95       	ret

00000212 <HLCD_vidSendNumber>:
 212:	8f 92       	push	r8
 214:	9f 92       	push	r9
 216:	af 92       	push	r10
 218:	bf 92       	push	r11
 21a:	cf 92       	push	r12
 21c:	df 92       	push	r13
 21e:	ef 92       	push	r14
 220:	ff 92       	push	r15
 222:	cf 93       	push	r28
 224:	4b 01       	movw	r8, r22
 226:	5c 01       	movw	r10, r24
 228:	61 15       	cp	r22, r1
 22a:	71 05       	cpc	r23, r1
 22c:	81 05       	cpc	r24, r1
 22e:	91 05       	cpc	r25, r1
 230:	21 f4       	brne	.+8      	; 0x23a <HLCD_vidSendNumber+0x28>
 232:	80 e3       	ldi	r24, 0x30	; 48
 234:	0e 94 ae 00 	call	0x15c	; 0x15c <HLCD_vidSendChar>
 238:	5c c0       	rjmp	.+184    	; 0x2f2 <HLCD_vidSendNumber+0xe0>
 23a:	99 23       	and	r25, r25
 23c:	5c f4       	brge	.+22     	; 0x254 <HLCD_vidSendNumber+0x42>
 23e:	8d e2       	ldi	r24, 0x2D	; 45
 240:	0e 94 ae 00 	call	0x15c	; 0x15c <HLCD_vidSendChar>
 244:	b0 94       	com	r11
 246:	a0 94       	com	r10
 248:	90 94       	com	r9
 24a:	80 94       	com	r8
 24c:	81 1c       	adc	r8, r1
 24e:	91 1c       	adc	r9, r1
 250:	a1 1c       	adc	r10, r1
 252:	b1 1c       	adc	r11, r1
 254:	a5 01       	movw	r20, r10
 256:	94 01       	movw	r18, r8
 258:	c1 2c       	mov	r12, r1
 25a:	d1 2c       	mov	r13, r1
 25c:	76 01       	movw	r14, r12
 25e:	c3 94       	inc	r12
 260:	1c c0       	rjmp	.+56     	; 0x29a <HLCD_vidSendNumber+0x88>
 262:	ca 01       	movw	r24, r20
 264:	b9 01       	movw	r22, r18
 266:	2a e0       	ldi	r18, 0x0A	; 10
 268:	30 e0       	ldi	r19, 0x00	; 0
 26a:	40 e0       	ldi	r20, 0x00	; 0
 26c:	50 e0       	ldi	r21, 0x00	; 0
 26e:	0e 94 87 06 	call	0xd0e	; 0xd0e <__divmodsi4>
 272:	d7 01       	movw	r26, r14
 274:	c6 01       	movw	r24, r12
 276:	88 0f       	add	r24, r24
 278:	99 1f       	adc	r25, r25
 27a:	aa 1f       	adc	r26, r26
 27c:	bb 1f       	adc	r27, r27
 27e:	6c 01       	movw	r12, r24
 280:	7d 01       	movw	r14, r26
 282:	cc 0c       	add	r12, r12
 284:	dd 1c       	adc	r13, r13
 286:	ee 1c       	adc	r14, r14
 288:	ff 1c       	adc	r15, r15
 28a:	cc 0c       	add	r12, r12
 28c:	dd 1c       	adc	r13, r13
 28e:	ee 1c       	adc	r14, r14
 290:	ff 1c       	adc	r15, r15
 292:	c8 0e       	add	r12, r24
 294:	d9 1e       	adc	r13, r25
 296:	ea 1e       	adc	r14, r26
 298:	fb 1e       	adc	r15, r27
 29a:	21 15       	cp	r18, r1
 29c:	31 05       	cpc	r19, r1
 29e:	41 05       	cpc	r20, r1
 2a0:	51 05       	cpc	r21, r1
 2a2:	f9 f6       	brne	.-66     	; 0x262 <HLCD_vidSendNumber+0x50>
 2a4:	c7 01       	movw	r24, r14
 2a6:	b6 01       	movw	r22, r12
 2a8:	2a e0       	ldi	r18, 0x0A	; 10
 2aa:	30 e0       	ldi	r19, 0x00	; 0
 2ac:	40 e0       	ldi	r20, 0x00	; 0
 2ae:	50 e0       	ldi	r21, 0x00	; 0
 2b0:	0e 94 65 06 	call	0xcca	; 0xcca <__udivmodsi4>
 2b4:	69 01       	movw	r12, r18
 2b6:	7a 01       	movw	r14, r20
 2b8:	17 c0       	rjmp	.+46     	; 0x2e8 <HLCD_vidSendNumber+0xd6>
 2ba:	c5 01       	movw	r24, r10
 2bc:	b4 01       	movw	r22, r8
 2be:	a7 01       	movw	r20, r14
 2c0:	96 01       	movw	r18, r12
 2c2:	0e 94 65 06 	call	0xcca	; 0xcca <__udivmodsi4>
 2c6:	c2 2f       	mov	r28, r18
 2c8:	4b 01       	movw	r8, r22
 2ca:	5c 01       	movw	r10, r24
 2cc:	c7 01       	movw	r24, r14
 2ce:	b6 01       	movw	r22, r12
 2d0:	2a e0       	ldi	r18, 0x0A	; 10
 2d2:	30 e0       	ldi	r19, 0x00	; 0
 2d4:	40 e0       	ldi	r20, 0x00	; 0
 2d6:	50 e0       	ldi	r21, 0x00	; 0
 2d8:	0e 94 65 06 	call	0xcca	; 0xcca <__udivmodsi4>
 2dc:	69 01       	movw	r12, r18
 2de:	7a 01       	movw	r14, r20
 2e0:	80 e3       	ldi	r24, 0x30	; 48
 2e2:	8c 0f       	add	r24, r28
 2e4:	0e 94 ae 00 	call	0x15c	; 0x15c <HLCD_vidSendChar>
 2e8:	c1 14       	cp	r12, r1
 2ea:	d1 04       	cpc	r13, r1
 2ec:	e1 04       	cpc	r14, r1
 2ee:	f1 04       	cpc	r15, r1
 2f0:	21 f7       	brne	.-56     	; 0x2ba <HLCD_vidSendNumber+0xa8>
 2f2:	cf 91       	pop	r28
 2f4:	ff 90       	pop	r15
 2f6:	ef 90       	pop	r14
 2f8:	df 90       	pop	r13
 2fa:	cf 90       	pop	r12
 2fc:	bf 90       	pop	r11
 2fe:	af 90       	pop	r10
 300:	9f 90       	pop	r9
 302:	8f 90       	pop	r8
 304:	08 95       	ret

00000306 <HLCD_vidSetPosition>:
 306:	81 30       	cpi	r24, 0x01	; 1
 308:	19 f0       	breq	.+6      	; 0x310 <HLCD_vidSetPosition+0xa>
 30a:	82 30       	cpi	r24, 0x02	; 2
 30c:	39 f0       	breq	.+14     	; 0x31c <HLCD_vidSetPosition+0x16>
 30e:	08 95       	ret
 310:	86 2f       	mov	r24, r22
 312:	8f 70       	andi	r24, 0x0F	; 15
 314:	80 68       	ori	r24, 0x80	; 128
 316:	0e 94 41 00 	call	0x82	; 0x82 <HLCD_vidSendCommend>
 31a:	08 95       	ret
 31c:	86 2f       	mov	r24, r22
 31e:	8f 70       	andi	r24, 0x0F	; 15
 320:	80 6c       	ori	r24, 0xC0	; 192
 322:	0e 94 41 00 	call	0x82	; 0x82 <HLCD_vidSendCommend>
 326:	08 95       	ret

00000328 <HLCD_vidClearScreen>:
 328:	81 e0       	ldi	r24, 0x01	; 1
 32a:	0e 94 41 00 	call	0x82	; 0x82 <HLCD_vidSendCommend>
 32e:	08 95       	ret

00000330 <HFlexSensor_vidInit>:
 330:	0e 94 b6 02 	call	0x56c	; 0x56c <MADC_vidInit>
 334:	08 95       	ret

00000336 <HFlexSensor_u16AnalogRead>:
 336:	cf 92       	push	r12
 338:	df 92       	push	r13
 33a:	ef 92       	push	r14
 33c:	ff 92       	push	r15
 33e:	0e 94 c8 02 	call	0x590	; 0x590 <MADC_u16Read>
 342:	bc 01       	movw	r22, r24
 344:	66 0f       	add	r22, r22
 346:	77 1f       	adc	r23, r23
 348:	66 0f       	add	r22, r22
 34a:	77 1f       	adc	r23, r23
 34c:	68 0f       	add	r22, r24
 34e:	79 1f       	adc	r23, r25
 350:	80 e0       	ldi	r24, 0x00	; 0
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	0e 94 41 05 	call	0xa82	; 0xa82 <__floatunsisf>
 358:	20 e0       	ldi	r18, 0x00	; 0
 35a:	30 ec       	ldi	r19, 0xC0	; 192
 35c:	4f e7       	ldi	r20, 0x7F	; 127
 35e:	54 e4       	ldi	r21, 0x44	; 68
 360:	0e 94 cf 04 	call	0x99e	; 0x99e <__divsf3>
 364:	6b 01       	movw	r12, r22
 366:	7c 01       	movw	r14, r24
 368:	20 e0       	ldi	r18, 0x00	; 0
 36a:	30 e0       	ldi	r19, 0x00	; 0
 36c:	a9 01       	movw	r20, r18
 36e:	0e 94 ca 04 	call	0x994	; 0x994 <__cmpsf2>
 372:	88 23       	and	r24, r24
 374:	a9 f0       	breq	.+42     	; 0x3a0 <HFlexSensor_u16AnalogRead+0x6a>
 376:	a7 01       	movw	r20, r14
 378:	96 01       	movw	r18, r12
 37a:	60 e0       	ldi	r22, 0x00	; 0
 37c:	70 e0       	ldi	r23, 0x00	; 0
 37e:	80 ea       	ldi	r24, 0xA0	; 160
 380:	90 e4       	ldi	r25, 0x40	; 64
 382:	0e 94 cf 04 	call	0x99e	; 0x99e <__divsf3>
 386:	20 e0       	ldi	r18, 0x00	; 0
 388:	30 e0       	ldi	r19, 0x00	; 0
 38a:	40 e8       	ldi	r20, 0x80	; 128
 38c:	5f e3       	ldi	r21, 0x3F	; 63
 38e:	0e 94 5d 04 	call	0x8ba	; 0x8ba <__subsf3>
 392:	20 e0       	ldi	r18, 0x00	; 0
 394:	30 e0       	ldi	r19, 0x00	; 0
 396:	4a ef       	ldi	r20, 0xFA	; 250
 398:	53 e4       	ldi	r21, 0x43	; 67
 39a:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__mulsf3>
 39e:	04 c0       	rjmp	.+8      	; 0x3a8 <HFlexSensor_u16AnalogRead+0x72>
 3a0:	60 e0       	ldi	r22, 0x00	; 0
 3a2:	70 e8       	ldi	r23, 0x80	; 128
 3a4:	82 e7       	ldi	r24, 0x72	; 114
 3a6:	94 e4       	ldi	r25, 0x44	; 68
 3a8:	ff 90       	pop	r15
 3aa:	ef 90       	pop	r14
 3ac:	df 90       	pop	r13
 3ae:	cf 90       	pop	r12
 3b0:	08 95       	ret

000003b2 <main>:
#include "flex_sensor.h"

/* Code Speed Analog Flexible sensor & Motion Analog Flexible sensors */
				
int main(void)
{
 3b2:	cf 93       	push	r28
 3b4:	df 93       	push	r29
 3b6:	00 d0       	rcall	.+0      	; 0x3b8 <main+0x6>
 3b8:	00 d0       	rcall	.+0      	; 0x3ba <main+0x8>
 3ba:	00 d0       	rcall	.+0      	; 0x3bc <main+0xa>
 3bc:	cd b7       	in	r28, 0x3d	; 61
 3be:	de b7       	in	r29, 0x3e	; 62
	
	// Variable Initiation
	f32 loc_u8MotionState = 0; 
	u8 loc_u8ChosenConvertorCounter = 0, loc_u8MotionDirection = 5, loc_u8Motionflag = 0,loc_u8SendCarState = 0;
	u8 arr_u8MotionChannel[4] = {DIO_ChannelA1,DIO_ChannelA2,DIO_ChannelA3,DIO_ChannelA4};
 3c0:	81 e0       	ldi	r24, 0x01	; 1
 3c2:	89 83       	std	Y+1, r24	; 0x01
 3c4:	82 e0       	ldi	r24, 0x02	; 2
 3c6:	8a 83       	std	Y+2, r24	; 0x02
 3c8:	83 e0       	ldi	r24, 0x03	; 3
 3ca:	8b 83       	std	Y+3, r24	; 0x03
 3cc:	84 e0       	ldi	r24, 0x04	; 4
 3ce:	8c 83       	std	Y+4, r24	; 0x04
		   	
	MDIO_vidInit();		 //DIO Initiation
 3d0:	0e 94 82 03 	call	0x704	; 0x704 <MDIO_vidInit>
	
	UART_init();   	    //UART Initiation
 3d4:	0e 94 28 04 	call	0x850	; 0x850 <UART_init>
	
   	HLCD_vidInit();		//LCD Initiation
 3d8:	0e 94 89 00 	call	0x112	; 0x112 <HLCD_vidInit>
	   	   
   	STD_ADC_InitType loc_STDOption = {ADC_Vref_AREF, ADC_Prescaler128};		//ADC References voltage and Prescaler
 3dc:	1d 82       	std	Y+5, r1	; 0x05
 3de:	87 e0       	ldi	r24, 0x07	; 7
 3e0:	8e 83       	std	Y+6, r24	; 0x06
   	
   	HFlexSensor_vidInit(&loc_STDOption);	//Flexible Sensor Initiation
 3e2:	ce 01       	movw	r24, r28
 3e4:	05 96       	adiw	r24, 0x05	; 5
 3e6:	0e 94 98 01 	call	0x330	; 0x330 <HFlexSensor_vidInit>
int main(void)
{
	
	// Variable Initiation
	f32 loc_u8MotionState = 0; 
	u8 loc_u8ChosenConvertorCounter = 0, loc_u8MotionDirection = 5, loc_u8Motionflag = 0,loc_u8SendCarState = 0;
 3ea:	0f 2e       	mov	r0, r31
 3ec:	f5 e0       	ldi	r31, 0x05	; 5
 3ee:	ff 2e       	mov	r15, r31
 3f0:	f0 2d       	mov	r31, r0
   	
   	HFlexSensor_vidInit(&loc_STDOption);	//Flexible Sensor Initiation
   	
   	while (1)
   	{		 
		loc_u8Motionflag = STD_Low;		// set loc_u8Motionflag variable to low
 3f2:	00 e0       	ldi	r16, 0x00	; 0
		
		for(loc_u8ChosenConvertorCounter = 0; loc_u8ChosenConvertorCounter < 4; loc_u8ChosenConvertorCounter++)		// For loop to read 4 motion flex sensor
 3f4:	10 e0       	ldi	r17, 0x00	; 0
 3f6:	1d c0       	rjmp	.+58     	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
		{			
			loc_u8MotionState = HFlexSensor_u16AnalogRead(arr_u8MotionChannel[loc_u8ChosenConvertorCounter]);		// Read Value of motion Flex Sensor
 3f8:	e1 e0       	ldi	r30, 0x01	; 1
 3fa:	f0 e0       	ldi	r31, 0x00	; 0
 3fc:	ec 0f       	add	r30, r28
 3fe:	fd 1f       	adc	r31, r29
 400:	e1 0f       	add	r30, r17
 402:	f1 1d       	adc	r31, r1
 404:	80 81       	ld	r24, Z
 406:	0e 94 9b 01 	call	0x336	; 0x336 <HFlexSensor_u16AnalogRead>
			
			if(loc_u8MotionState > 1180.0)			// if condition to check if flex sensor is bended
 40a:	20 e0       	ldi	r18, 0x00	; 0
 40c:	30 e8       	ldi	r19, 0x80	; 128
 40e:	43 e9       	ldi	r20, 0x93	; 147
 410:	54 e4       	ldi	r21, 0x44	; 68
 412:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <__gesf2>
 416:	18 16       	cp	r1, r24
 418:	2c f4       	brge	.+10     	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
			{
				if(STD_High == loc_u8Motionflag)	// if condition to check if two or more flex sensor were bended
 41a:	01 30       	cpi	r16, 0x01	; 1
 41c:	69 f0       	breq	.+26     	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
					loc_u8MotionDirection = 5;
					break;
				}
				else                               // else condition to select motion direction 
				{
					loc_u8MotionDirection = loc_u8ChosenConvertorCounter;
 41e:	f1 2e       	mov	r15, r17
					loc_u8Motionflag = STD_High;
 420:	01 e0       	ldi	r16, 0x01	; 1
 422:	06 c0       	rjmp	.+12     	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
				}
			}
			else if(STD_Low == loc_u8Motionflag) // else if condition if there no motion order
 424:	01 11       	cpse	r16, r1
 426:	04 c0       	rjmp	.+8      	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
			{
				loc_u8MotionDirection = 5;
 428:	0f 2e       	mov	r0, r31
 42a:	f5 e0       	ldi	r31, 0x05	; 5
 42c:	ff 2e       	mov	r15, r31
 42e:	f0 2d       	mov	r31, r0
   	
   	while (1)
   	{		 
		loc_u8Motionflag = STD_Low;		// set loc_u8Motionflag variable to low
		
		for(loc_u8ChosenConvertorCounter = 0; loc_u8ChosenConvertorCounter < 4; loc_u8ChosenConvertorCounter++)		// For loop to read 4 motion flex sensor
 430:	1f 5f       	subi	r17, 0xFF	; 255
 432:	14 30       	cpi	r17, 0x04	; 4
 434:	08 f3       	brcs	.-62     	; 0x3f8 <main+0x46>
 436:	04 c0       	rjmp	.+8      	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
			if(loc_u8MotionState > 1180.0)			// if condition to check if flex sensor is bended
			{
				if(STD_High == loc_u8Motionflag)	// if condition to check if two or more flex sensor were bended
				{
					loc_u8Motionflag = STD_Low;
					loc_u8MotionDirection = 5;
 438:	0f 2e       	mov	r0, r31
 43a:	f5 e0       	ldi	r31, 0x05	; 5
 43c:	ff 2e       	mov	r15, r31
 43e:	f0 2d       	mov	r31, r0
				loc_u8MotionDirection = 5;
			}

		}
		
		HLCD_vidSetPosition(1,0);			// Select first line in LCD
 440:	60 e0       	ldi	r22, 0x00	; 0
 442:	81 e0       	ldi	r24, 0x01	; 1
 444:	0e 94 83 01 	call	0x306	; 0x306 <HLCD_vidSetPosition>
		HLCD_vidSendString("Direction: ");	// Print 'Direction:' Word in LCD
 448:	80 ea       	ldi	r24, 0xA0	; 160
 44a:	90 e0       	ldi	r25, 0x00	; 0
 44c:	0e 94 f6 00 	call	0x1ec	; 0x1ec <HLCD_vidSendString>
		
		switch(loc_u8MotionDirection)
 450:	21 e0       	ldi	r18, 0x01	; 1
 452:	f2 16       	cp	r15, r18
 454:	71 f0       	breq	.+28     	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
 456:	f2 16       	cp	r15, r18
 458:	38 f0       	brcs	.+14     	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
 45a:	82 e0       	ldi	r24, 0x02	; 2
 45c:	f8 16       	cp	r15, r24
 45e:	71 f0       	breq	.+28     	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
 460:	93 e0       	ldi	r25, 0x03	; 3
 462:	f9 16       	cp	r15, r25
 464:	81 f0       	breq	.+32     	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
 466:	14 c0       	rjmp	.+40     	; 0x490 <__EEPROM_REGION_LENGTH__+0x90>
		{
			case 0 : { loc_u8SendCarState = 11; HLCD_vidSendChar('F'); break;}	// print F for forward motion order
 468:	86 e4       	ldi	r24, 0x46	; 70
 46a:	0e 94 ae 00 	call	0x15c	; 0x15c <HLCD_vidSendChar>
 46e:	1b e0       	ldi	r17, 0x0B	; 11
 470:	14 c0       	rjmp	.+40     	; 0x49a <__EEPROM_REGION_LENGTH__+0x9a>
			case 1 : { loc_u8SendCarState = 12; HLCD_vidSendChar('B'); break;}	// print B for backward motion order
 472:	82 e4       	ldi	r24, 0x42	; 66
 474:	0e 94 ae 00 	call	0x15c	; 0x15c <HLCD_vidSendChar>
 478:	1c e0       	ldi	r17, 0x0C	; 12
 47a:	0f c0       	rjmp	.+30     	; 0x49a <__EEPROM_REGION_LENGTH__+0x9a>
			case 2 : { loc_u8SendCarState = 13; HLCD_vidSendChar('R'); break;}	// print R for right motion order
 47c:	82 e5       	ldi	r24, 0x52	; 82
 47e:	0e 94 ae 00 	call	0x15c	; 0x15c <HLCD_vidSendChar>
 482:	1d e0       	ldi	r17, 0x0D	; 13
 484:	0a c0       	rjmp	.+20     	; 0x49a <__EEPROM_REGION_LENGTH__+0x9a>
			case 3 : { loc_u8SendCarState = 14; HLCD_vidSendChar('L'); break;}	// print L for left motion order
 486:	8c e4       	ldi	r24, 0x4C	; 76
 488:	0e 94 ae 00 	call	0x15c	; 0x15c <HLCD_vidSendChar>
 48c:	1e e0       	ldi	r17, 0x0E	; 14
 48e:	05 c0       	rjmp	.+10     	; 0x49a <__EEPROM_REGION_LENGTH__+0x9a>
			default: { loc_u8SendCarState = 15; HLCD_vidSendString("No M");}		// print No M for no motion order
 490:	8c ea       	ldi	r24, 0xAC	; 172
 492:	90 e0       	ldi	r25, 0x00	; 0
 494:	0e 94 f6 00 	call	0x1ec	; 0x1ec <HLCD_vidSendString>
 498:	1f e0       	ldi	r17, 0x0F	; 15
		}
		

		loc_u8MotionState = HFlexSensor_u16AnalogRead(ADC_Channel0);			// Read Value of Speed Flex Sensor
 49a:	80 e0       	ldi	r24, 0x00	; 0
 49c:	0e 94 9b 01 	call	0x336	; 0x336 <HFlexSensor_u16AnalogRead>
 4a0:	4b 01       	movw	r8, r22
 4a2:	5c 01       	movw	r10, r24
		
		HLCD_vidSetPosition(2,0);			// Select Second line in LCD
 4a4:	60 e0       	ldi	r22, 0x00	; 0
 4a6:	82 e0       	ldi	r24, 0x02	; 2
 4a8:	0e 94 83 01 	call	0x306	; 0x306 <HLCD_vidSetPosition>
		HLCD_vidSendString("Speed: ");		// Print 'Speed:' Word in LCD
 4ac:	81 eb       	ldi	r24, 0xB1	; 177
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	0e 94 f6 00 	call	0x1ec	; 0x1ec <HLCD_vidSendString>
		
		// if else if else condition  to select Speed 
		if(loc_u8MotionState < 1100.0)			// if condition to See if there is no motion
 4b4:	20 e0       	ldi	r18, 0x00	; 0
 4b6:	30 e8       	ldi	r19, 0x80	; 128
 4b8:	49 e8       	ldi	r20, 0x89	; 137
 4ba:	54 e4       	ldi	r21, 0x44	; 68
 4bc:	c5 01       	movw	r24, r10
 4be:	b4 01       	movw	r22, r8
 4c0:	0e 94 ca 04 	call	0x994	; 0x994 <__cmpsf2>
 4c4:	88 23       	and	r24, r24
 4c6:	34 f4       	brge	.+12     	; 0x4d4 <__EEPROM_REGION_LENGTH__+0xd4>
		{
			HLCD_vidSendNumber(0);				// print 0 for no speed
 4c8:	60 e0       	ldi	r22, 0x00	; 0
 4ca:	70 e0       	ldi	r23, 0x00	; 0
 4cc:	cb 01       	movw	r24, r22
 4ce:	0e 94 09 01 	call	0x212	; 0x212 <HLCD_vidSendNumber>
 4d2:	3d c0       	rjmp	.+122    	; 0x54e <__EEPROM_REGION_LENGTH__+0x14e>
			loc_u8SendCarState = loc_u8SendCarState | (0<<4);
		}
		else if(loc_u8MotionState < 1400.0)		// if condition to See if order of speed first level 
 4d4:	20 e0       	ldi	r18, 0x00	; 0
 4d6:	30 e0       	ldi	r19, 0x00	; 0
 4d8:	4f ea       	ldi	r20, 0xAF	; 175
 4da:	54 e4       	ldi	r21, 0x44	; 68
 4dc:	c5 01       	movw	r24, r10
 4de:	b4 01       	movw	r22, r8
 4e0:	0e 94 ca 04 	call	0x994	; 0x994 <__cmpsf2>
 4e4:	88 23       	and	r24, r24
 4e6:	44 f4       	brge	.+16     	; 0x4f8 <__EEPROM_REGION_LENGTH__+0xf8>
		{
			HLCD_vidSendNumber(1);				// print 1 for first level of speed
 4e8:	61 e0       	ldi	r22, 0x01	; 1
 4ea:	70 e0       	ldi	r23, 0x00	; 0
 4ec:	80 e0       	ldi	r24, 0x00	; 0
 4ee:	90 e0       	ldi	r25, 0x00	; 0
 4f0:	0e 94 09 01 	call	0x212	; 0x212 <HLCD_vidSendNumber>
			loc_u8SendCarState = loc_u8SendCarState | (1<<4);
 4f4:	10 61       	ori	r17, 0x10	; 16
 4f6:	2b c0       	rjmp	.+86     	; 0x54e <__EEPROM_REGION_LENGTH__+0x14e>
		}
		else if(loc_u8MotionState < 1600.0)		// if condition to See if order of speed second level 
 4f8:	20 e0       	ldi	r18, 0x00	; 0
 4fa:	30 e0       	ldi	r19, 0x00	; 0
 4fc:	48 ec       	ldi	r20, 0xC8	; 200
 4fe:	54 e4       	ldi	r21, 0x44	; 68
 500:	c5 01       	movw	r24, r10
 502:	b4 01       	movw	r22, r8
 504:	0e 94 ca 04 	call	0x994	; 0x994 <__cmpsf2>
 508:	88 23       	and	r24, r24
 50a:	44 f4       	brge	.+16     	; 0x51c <__EEPROM_REGION_LENGTH__+0x11c>
		{
			HLCD_vidSendNumber(2);				// print 2 for second level of speed
 50c:	62 e0       	ldi	r22, 0x02	; 2
 50e:	70 e0       	ldi	r23, 0x00	; 0
 510:	80 e0       	ldi	r24, 0x00	; 0
 512:	90 e0       	ldi	r25, 0x00	; 0
 514:	0e 94 09 01 	call	0x212	; 0x212 <HLCD_vidSendNumber>
			loc_u8SendCarState = loc_u8SendCarState | (2<<4);
 518:	10 62       	ori	r17, 0x20	; 32
 51a:	19 c0       	rjmp	.+50     	; 0x54e <__EEPROM_REGION_LENGTH__+0x14e>
		}
		else if(loc_u8MotionState < 1810.0)		// if condition to See if order of speed third level 
 51c:	20 e0       	ldi	r18, 0x00	; 0
 51e:	30 e4       	ldi	r19, 0x40	; 64
 520:	42 ee       	ldi	r20, 0xE2	; 226
 522:	54 e4       	ldi	r21, 0x44	; 68
 524:	c5 01       	movw	r24, r10
 526:	b4 01       	movw	r22, r8
 528:	0e 94 ca 04 	call	0x994	; 0x994 <__cmpsf2>
 52c:	88 23       	and	r24, r24
 52e:	44 f4       	brge	.+16     	; 0x540 <__EEPROM_REGION_LENGTH__+0x140>
		{
			HLCD_vidSendNumber(3);				// print 3 for third level of speed
 530:	63 e0       	ldi	r22, 0x03	; 3
 532:	70 e0       	ldi	r23, 0x00	; 0
 534:	80 e0       	ldi	r24, 0x00	; 0
 536:	90 e0       	ldi	r25, 0x00	; 0
 538:	0e 94 09 01 	call	0x212	; 0x212 <HLCD_vidSendNumber>
			loc_u8SendCarState = loc_u8SendCarState | (3<<4);
 53c:	10 63       	ori	r17, 0x30	; 48
 53e:	07 c0       	rjmp	.+14     	; 0x54e <__EEPROM_REGION_LENGTH__+0x14e>
		}
		else									// if condition to See if order of speed fourth level 
		{
			HLCD_vidSendNumber(4);				// print 4 for fourth level of speed
 540:	64 e0       	ldi	r22, 0x04	; 4
 542:	70 e0       	ldi	r23, 0x00	; 0
 544:	80 e0       	ldi	r24, 0x00	; 0
 546:	90 e0       	ldi	r25, 0x00	; 0
 548:	0e 94 09 01 	call	0x212	; 0x212 <HLCD_vidSendNumber>
			loc_u8SendCarState = loc_u8SendCarState | (4<<4);
 54c:	10 64       	ori	r17, 0x40	; 64
		}
		
		UART_TxChar(loc_u8SendCarState);
 54e:	81 2f       	mov	r24, r17
 550:	0e 94 59 04 	call	0x8b2	; 0x8b2 <UART_TxChar>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 554:	2f ef       	ldi	r18, 0xFF	; 255
 556:	83 ec       	ldi	r24, 0xC3	; 195
 558:	99 e0       	ldi	r25, 0x09	; 9
 55a:	21 50       	subi	r18, 0x01	; 1
 55c:	80 40       	sbci	r24, 0x00	; 0
 55e:	90 40       	sbci	r25, 0x00	; 0
 560:	e1 f7       	brne	.-8      	; 0x55a <__EEPROM_REGION_LENGTH__+0x15a>
 562:	00 c0       	rjmp	.+0      	; 0x564 <__EEPROM_REGION_LENGTH__+0x164>
 564:	00 00       	nop
		
		_delay_ms(200);
		HLCD_vidClearScreen();
 566:	0e 94 94 01 	call	0x328	; 0x328 <HLCD_vidClearScreen>
   	}
 56a:	43 cf       	rjmp	.-378    	; 0x3f2 <main+0x40>

0000056c <MADC_vidInit>:
 56c:	fc 01       	movw	r30, r24
 56e:	90 81       	ld	r25, Z
 570:	92 95       	swap	r25
 572:	99 0f       	add	r25, r25
 574:	99 0f       	add	r25, r25
 576:	90 7c       	andi	r25, 0xC0	; 192
 578:	97 b9       	out	0x07, r25	; 7
 57a:	96 b1       	in	r25, 0x06	; 6
 57c:	81 81       	ldd	r24, Z+1	; 0x01
 57e:	89 2b       	or	r24, r25
 580:	86 b9       	out	0x06, r24	; 6
 582:	86 b1       	in	r24, 0x06	; 6
 584:	8f 7d       	andi	r24, 0xDF	; 223
 586:	86 b9       	out	0x06, r24	; 6
 588:	86 b1       	in	r24, 0x06	; 6
 58a:	80 68       	ori	r24, 0x80	; 128
 58c:	86 b9       	out	0x06, r24	; 6
 58e:	08 95       	ret

00000590 <MADC_u16Read>:
 590:	97 b1       	in	r25, 0x07	; 7
 592:	90 7e       	andi	r25, 0xE0	; 224
 594:	97 b9       	out	0x07, r25	; 7
 596:	97 b1       	in	r25, 0x07	; 7
 598:	8f 71       	andi	r24, 0x1F	; 31
 59a:	98 2b       	or	r25, r24
 59c:	97 b9       	out	0x07, r25	; 7
 59e:	86 b1       	in	r24, 0x06	; 6
 5a0:	80 64       	ori	r24, 0x40	; 64
 5a2:	86 b9       	out	0x06, r24	; 6
 5a4:	34 9b       	sbis	0x06, 4	; 6
 5a6:	fe cf       	rjmp	.-4      	; 0x5a4 <MADC_u16Read+0x14>
 5a8:	86 b1       	in	r24, 0x06	; 6
 5aa:	80 61       	ori	r24, 0x10	; 16
 5ac:	86 b9       	out	0x06, r24	; 6
 5ae:	24 b1       	in	r18, 0x04	; 4
 5b0:	85 b1       	in	r24, 0x05	; 5
 5b2:	90 e0       	ldi	r25, 0x00	; 0
 5b4:	98 2f       	mov	r25, r24
 5b6:	88 27       	eor	r24, r24
 5b8:	82 2b       	or	r24, r18
 5ba:	08 95       	ret

000005bc <MDIO_vidWriteChannel>:
 5bc:	98 2f       	mov	r25, r24
 5be:	96 95       	lsr	r25
 5c0:	96 95       	lsr	r25
 5c2:	96 95       	lsr	r25
 5c4:	87 70       	andi	r24, 0x07	; 7
 5c6:	91 30       	cpi	r25, 0x01	; 1
 5c8:	21 f1       	breq	.+72     	; 0x612 <MDIO_vidWriteChannel+0x56>
 5ca:	30 f0       	brcs	.+12     	; 0x5d8 <MDIO_vidWriteChannel+0x1c>
 5cc:	92 30       	cpi	r25, 0x02	; 2
 5ce:	f1 f1       	breq	.+124    	; 0x64c <MDIO_vidWriteChannel+0x90>
 5d0:	93 30       	cpi	r25, 0x03	; 3
 5d2:	09 f4       	brne	.+2      	; 0x5d6 <MDIO_vidWriteChannel+0x1a>
 5d4:	58 c0       	rjmp	.+176    	; 0x686 <MDIO_vidWriteChannel+0xca>
 5d6:	08 95       	ret
 5d8:	61 30       	cpi	r22, 0x01	; 1
 5da:	69 f4       	brne	.+26     	; 0x5f6 <MDIO_vidWriteChannel+0x3a>
 5dc:	4b b3       	in	r20, 0x1b	; 27
 5de:	21 e0       	ldi	r18, 0x01	; 1
 5e0:	30 e0       	ldi	r19, 0x00	; 0
 5e2:	b9 01       	movw	r22, r18
 5e4:	02 c0       	rjmp	.+4      	; 0x5ea <MDIO_vidWriteChannel+0x2e>
 5e6:	66 0f       	add	r22, r22
 5e8:	77 1f       	adc	r23, r23
 5ea:	8a 95       	dec	r24
 5ec:	e2 f7       	brpl	.-8      	; 0x5e6 <MDIO_vidWriteChannel+0x2a>
 5ee:	cb 01       	movw	r24, r22
 5f0:	84 2b       	or	r24, r20
 5f2:	8b bb       	out	0x1b, r24	; 27
 5f4:	08 95       	ret
 5f6:	4b b3       	in	r20, 0x1b	; 27
 5f8:	21 e0       	ldi	r18, 0x01	; 1
 5fa:	30 e0       	ldi	r19, 0x00	; 0
 5fc:	b9 01       	movw	r22, r18
 5fe:	02 c0       	rjmp	.+4      	; 0x604 <MDIO_vidWriteChannel+0x48>
 600:	66 0f       	add	r22, r22
 602:	77 1f       	adc	r23, r23
 604:	8a 95       	dec	r24
 606:	e2 f7       	brpl	.-8      	; 0x600 <MDIO_vidWriteChannel+0x44>
 608:	cb 01       	movw	r24, r22
 60a:	80 95       	com	r24
 60c:	84 23       	and	r24, r20
 60e:	8b bb       	out	0x1b, r24	; 27
 610:	08 95       	ret
 612:	61 30       	cpi	r22, 0x01	; 1
 614:	69 f4       	brne	.+26     	; 0x630 <MDIO_vidWriteChannel+0x74>
 616:	48 b3       	in	r20, 0x18	; 24
 618:	21 e0       	ldi	r18, 0x01	; 1
 61a:	30 e0       	ldi	r19, 0x00	; 0
 61c:	b9 01       	movw	r22, r18
 61e:	02 c0       	rjmp	.+4      	; 0x624 <MDIO_vidWriteChannel+0x68>
 620:	66 0f       	add	r22, r22
 622:	77 1f       	adc	r23, r23
 624:	8a 95       	dec	r24
 626:	e2 f7       	brpl	.-8      	; 0x620 <MDIO_vidWriteChannel+0x64>
 628:	cb 01       	movw	r24, r22
 62a:	84 2b       	or	r24, r20
 62c:	88 bb       	out	0x18, r24	; 24
 62e:	08 95       	ret
 630:	48 b3       	in	r20, 0x18	; 24
 632:	21 e0       	ldi	r18, 0x01	; 1
 634:	30 e0       	ldi	r19, 0x00	; 0
 636:	b9 01       	movw	r22, r18
 638:	02 c0       	rjmp	.+4      	; 0x63e <MDIO_vidWriteChannel+0x82>
 63a:	66 0f       	add	r22, r22
 63c:	77 1f       	adc	r23, r23
 63e:	8a 95       	dec	r24
 640:	e2 f7       	brpl	.-8      	; 0x63a <MDIO_vidWriteChannel+0x7e>
 642:	cb 01       	movw	r24, r22
 644:	80 95       	com	r24
 646:	84 23       	and	r24, r20
 648:	88 bb       	out	0x18, r24	; 24
 64a:	08 95       	ret
 64c:	61 30       	cpi	r22, 0x01	; 1
 64e:	69 f4       	brne	.+26     	; 0x66a <MDIO_vidWriteChannel+0xae>
 650:	45 b3       	in	r20, 0x15	; 21
 652:	21 e0       	ldi	r18, 0x01	; 1
 654:	30 e0       	ldi	r19, 0x00	; 0
 656:	b9 01       	movw	r22, r18
 658:	02 c0       	rjmp	.+4      	; 0x65e <MDIO_vidWriteChannel+0xa2>
 65a:	66 0f       	add	r22, r22
 65c:	77 1f       	adc	r23, r23
 65e:	8a 95       	dec	r24
 660:	e2 f7       	brpl	.-8      	; 0x65a <MDIO_vidWriteChannel+0x9e>
 662:	cb 01       	movw	r24, r22
 664:	84 2b       	or	r24, r20
 666:	85 bb       	out	0x15, r24	; 21
 668:	08 95       	ret
 66a:	45 b3       	in	r20, 0x15	; 21
 66c:	21 e0       	ldi	r18, 0x01	; 1
 66e:	30 e0       	ldi	r19, 0x00	; 0
 670:	b9 01       	movw	r22, r18
 672:	02 c0       	rjmp	.+4      	; 0x678 <MDIO_vidWriteChannel+0xbc>
 674:	66 0f       	add	r22, r22
 676:	77 1f       	adc	r23, r23
 678:	8a 95       	dec	r24
 67a:	e2 f7       	brpl	.-8      	; 0x674 <MDIO_vidWriteChannel+0xb8>
 67c:	cb 01       	movw	r24, r22
 67e:	80 95       	com	r24
 680:	84 23       	and	r24, r20
 682:	85 bb       	out	0x15, r24	; 21
 684:	08 95       	ret
 686:	61 30       	cpi	r22, 0x01	; 1
 688:	69 f4       	brne	.+26     	; 0x6a4 <MDIO_vidWriteChannel+0xe8>
 68a:	42 b3       	in	r20, 0x12	; 18
 68c:	21 e0       	ldi	r18, 0x01	; 1
 68e:	30 e0       	ldi	r19, 0x00	; 0
 690:	b9 01       	movw	r22, r18
 692:	02 c0       	rjmp	.+4      	; 0x698 <MDIO_vidWriteChannel+0xdc>
 694:	66 0f       	add	r22, r22
 696:	77 1f       	adc	r23, r23
 698:	8a 95       	dec	r24
 69a:	e2 f7       	brpl	.-8      	; 0x694 <MDIO_vidWriteChannel+0xd8>
 69c:	cb 01       	movw	r24, r22
 69e:	84 2b       	or	r24, r20
 6a0:	82 bb       	out	0x12, r24	; 18
 6a2:	08 95       	ret
 6a4:	42 b3       	in	r20, 0x12	; 18
 6a6:	21 e0       	ldi	r18, 0x01	; 1
 6a8:	30 e0       	ldi	r19, 0x00	; 0
 6aa:	b9 01       	movw	r22, r18
 6ac:	02 c0       	rjmp	.+4      	; 0x6b2 <MDIO_vidWriteChannel+0xf6>
 6ae:	66 0f       	add	r22, r22
 6b0:	77 1f       	adc	r23, r23
 6b2:	8a 95       	dec	r24
 6b4:	e2 f7       	brpl	.-8      	; 0x6ae <MDIO_vidWriteChannel+0xf2>
 6b6:	cb 01       	movw	r24, r22
 6b8:	80 95       	com	r24
 6ba:	84 23       	and	r24, r20
 6bc:	82 bb       	out	0x12, r24	; 18
 6be:	08 95       	ret

000006c0 <MDIO_u8ReadPort>:
 6c0:	81 30       	cpi	r24, 0x01	; 1
 6c2:	41 f0       	breq	.+16     	; 0x6d4 <MDIO_u8ReadPort+0x14>
 6c4:	28 f0       	brcs	.+10     	; 0x6d0 <MDIO_u8ReadPort+0x10>
 6c6:	82 30       	cpi	r24, 0x02	; 2
 6c8:	39 f0       	breq	.+14     	; 0x6d8 <MDIO_u8ReadPort+0x18>
 6ca:	83 30       	cpi	r24, 0x03	; 3
 6cc:	39 f0       	breq	.+14     	; 0x6dc <MDIO_u8ReadPort+0x1c>
 6ce:	08 c0       	rjmp	.+16     	; 0x6e0 <MDIO_u8ReadPort+0x20>
 6d0:	8b b3       	in	r24, 0x1b	; 27
 6d2:	08 95       	ret
 6d4:	88 b3       	in	r24, 0x18	; 24
 6d6:	08 95       	ret
 6d8:	85 b3       	in	r24, 0x15	; 21
 6da:	08 95       	ret
 6dc:	82 b3       	in	r24, 0x12	; 18
 6de:	08 95       	ret
 6e0:	80 e0       	ldi	r24, 0x00	; 0
 6e2:	08 95       	ret

000006e4 <MDIO_vidWritePort>:
 6e4:	81 30       	cpi	r24, 0x01	; 1
 6e6:	41 f0       	breq	.+16     	; 0x6f8 <MDIO_vidWritePort+0x14>
 6e8:	28 f0       	brcs	.+10     	; 0x6f4 <MDIO_vidWritePort+0x10>
 6ea:	82 30       	cpi	r24, 0x02	; 2
 6ec:	39 f0       	breq	.+14     	; 0x6fc <MDIO_vidWritePort+0x18>
 6ee:	83 30       	cpi	r24, 0x03	; 3
 6f0:	39 f0       	breq	.+14     	; 0x700 <MDIO_vidWritePort+0x1c>
 6f2:	08 95       	ret
 6f4:	6b bb       	out	0x1b, r22	; 27
 6f6:	08 95       	ret
 6f8:	68 bb       	out	0x18, r22	; 24
 6fa:	08 95       	ret
 6fc:	65 bb       	out	0x15, r22	; 21
 6fe:	08 95       	ret
 700:	62 bb       	out	0x12, r22	; 18
 702:	08 95       	ret

00000704 <MDIO_vidInit>:
 704:	80 e0       	ldi	r24, 0x00	; 0
 706:	a0 c0       	rjmp	.+320    	; 0x848 <__DATA_REGION_LENGTH__+0x48>
 708:	98 2f       	mov	r25, r24
 70a:	96 95       	lsr	r25
 70c:	96 95       	lsr	r25
 70e:	96 95       	lsr	r25
 710:	28 2f       	mov	r18, r24
 712:	27 70       	andi	r18, 0x07	; 7
 714:	91 30       	cpi	r25, 0x01	; 1
 716:	61 f1       	breq	.+88     	; 0x770 <MDIO_vidInit+0x6c>
 718:	38 f0       	brcs	.+14     	; 0x728 <MDIO_vidInit+0x24>
 71a:	92 30       	cpi	r25, 0x02	; 2
 71c:	09 f4       	brne	.+2      	; 0x720 <MDIO_vidInit+0x1c>
 71e:	4c c0       	rjmp	.+152    	; 0x7b8 <MDIO_vidInit+0xb4>
 720:	93 30       	cpi	r25, 0x03	; 3
 722:	09 f4       	brne	.+2      	; 0x726 <MDIO_vidInit+0x22>
 724:	6d c0       	rjmp	.+218    	; 0x800 <__DATA_REGION_LENGTH__>
 726:	8f c0       	rjmp	.+286    	; 0x846 <__DATA_REGION_LENGTH__+0x46>
 728:	e8 2f       	mov	r30, r24
 72a:	f0 e0       	ldi	r31, 0x00	; 0
 72c:	ee 0f       	add	r30, r30
 72e:	ff 1f       	adc	r31, r31
 730:	e0 5a       	subi	r30, 0xA0	; 160
 732:	ff 4f       	sbci	r31, 0xFF	; 255
 734:	90 81       	ld	r25, Z
 736:	91 30       	cpi	r25, 0x01	; 1
 738:	69 f4       	brne	.+26     	; 0x754 <MDIO_vidInit+0x50>
 73a:	9a b3       	in	r25, 0x1a	; 26
 73c:	41 e0       	ldi	r20, 0x01	; 1
 73e:	50 e0       	ldi	r21, 0x00	; 0
 740:	ba 01       	movw	r22, r20
 742:	02 c0       	rjmp	.+4      	; 0x748 <MDIO_vidInit+0x44>
 744:	66 0f       	add	r22, r22
 746:	77 1f       	adc	r23, r23
 748:	2a 95       	dec	r18
 74a:	e2 f7       	brpl	.-8      	; 0x744 <MDIO_vidInit+0x40>
 74c:	9b 01       	movw	r18, r22
 74e:	29 2b       	or	r18, r25
 750:	2a bb       	out	0x1a, r18	; 26
 752:	79 c0       	rjmp	.+242    	; 0x846 <__DATA_REGION_LENGTH__+0x46>
 754:	9a b3       	in	r25, 0x1a	; 26
 756:	41 e0       	ldi	r20, 0x01	; 1
 758:	50 e0       	ldi	r21, 0x00	; 0
 75a:	ba 01       	movw	r22, r20
 75c:	02 c0       	rjmp	.+4      	; 0x762 <MDIO_vidInit+0x5e>
 75e:	66 0f       	add	r22, r22
 760:	77 1f       	adc	r23, r23
 762:	2a 95       	dec	r18
 764:	e2 f7       	brpl	.-8      	; 0x75e <MDIO_vidInit+0x5a>
 766:	9b 01       	movw	r18, r22
 768:	20 95       	com	r18
 76a:	29 23       	and	r18, r25
 76c:	2a bb       	out	0x1a, r18	; 26
 76e:	6b c0       	rjmp	.+214    	; 0x846 <__DATA_REGION_LENGTH__+0x46>
 770:	e8 2f       	mov	r30, r24
 772:	f0 e0       	ldi	r31, 0x00	; 0
 774:	ee 0f       	add	r30, r30
 776:	ff 1f       	adc	r31, r31
 778:	e0 5a       	subi	r30, 0xA0	; 160
 77a:	ff 4f       	sbci	r31, 0xFF	; 255
 77c:	90 81       	ld	r25, Z
 77e:	91 30       	cpi	r25, 0x01	; 1
 780:	69 f4       	brne	.+26     	; 0x79c <MDIO_vidInit+0x98>
 782:	97 b3       	in	r25, 0x17	; 23
 784:	41 e0       	ldi	r20, 0x01	; 1
 786:	50 e0       	ldi	r21, 0x00	; 0
 788:	ba 01       	movw	r22, r20
 78a:	02 c0       	rjmp	.+4      	; 0x790 <MDIO_vidInit+0x8c>
 78c:	66 0f       	add	r22, r22
 78e:	77 1f       	adc	r23, r23
 790:	2a 95       	dec	r18
 792:	e2 f7       	brpl	.-8      	; 0x78c <MDIO_vidInit+0x88>
 794:	9b 01       	movw	r18, r22
 796:	29 2b       	or	r18, r25
 798:	27 bb       	out	0x17, r18	; 23
 79a:	55 c0       	rjmp	.+170    	; 0x846 <__DATA_REGION_LENGTH__+0x46>
 79c:	97 b3       	in	r25, 0x17	; 23
 79e:	41 e0       	ldi	r20, 0x01	; 1
 7a0:	50 e0       	ldi	r21, 0x00	; 0
 7a2:	ba 01       	movw	r22, r20
 7a4:	02 c0       	rjmp	.+4      	; 0x7aa <MDIO_vidInit+0xa6>
 7a6:	66 0f       	add	r22, r22
 7a8:	77 1f       	adc	r23, r23
 7aa:	2a 95       	dec	r18
 7ac:	e2 f7       	brpl	.-8      	; 0x7a6 <MDIO_vidInit+0xa2>
 7ae:	9b 01       	movw	r18, r22
 7b0:	20 95       	com	r18
 7b2:	29 23       	and	r18, r25
 7b4:	27 bb       	out	0x17, r18	; 23
 7b6:	47 c0       	rjmp	.+142    	; 0x846 <__DATA_REGION_LENGTH__+0x46>
 7b8:	e8 2f       	mov	r30, r24
 7ba:	f0 e0       	ldi	r31, 0x00	; 0
 7bc:	ee 0f       	add	r30, r30
 7be:	ff 1f       	adc	r31, r31
 7c0:	e0 5a       	subi	r30, 0xA0	; 160
 7c2:	ff 4f       	sbci	r31, 0xFF	; 255
 7c4:	90 81       	ld	r25, Z
 7c6:	91 30       	cpi	r25, 0x01	; 1
 7c8:	69 f4       	brne	.+26     	; 0x7e4 <MDIO_vidInit+0xe0>
 7ca:	94 b3       	in	r25, 0x14	; 20
 7cc:	41 e0       	ldi	r20, 0x01	; 1
 7ce:	50 e0       	ldi	r21, 0x00	; 0
 7d0:	ba 01       	movw	r22, r20
 7d2:	02 c0       	rjmp	.+4      	; 0x7d8 <MDIO_vidInit+0xd4>
 7d4:	66 0f       	add	r22, r22
 7d6:	77 1f       	adc	r23, r23
 7d8:	2a 95       	dec	r18
 7da:	e2 f7       	brpl	.-8      	; 0x7d4 <MDIO_vidInit+0xd0>
 7dc:	9b 01       	movw	r18, r22
 7de:	29 2b       	or	r18, r25
 7e0:	24 bb       	out	0x14, r18	; 20
 7e2:	31 c0       	rjmp	.+98     	; 0x846 <__DATA_REGION_LENGTH__+0x46>
 7e4:	94 b3       	in	r25, 0x14	; 20
 7e6:	41 e0       	ldi	r20, 0x01	; 1
 7e8:	50 e0       	ldi	r21, 0x00	; 0
 7ea:	ba 01       	movw	r22, r20
 7ec:	02 c0       	rjmp	.+4      	; 0x7f2 <MDIO_vidInit+0xee>
 7ee:	66 0f       	add	r22, r22
 7f0:	77 1f       	adc	r23, r23
 7f2:	2a 95       	dec	r18
 7f4:	e2 f7       	brpl	.-8      	; 0x7ee <MDIO_vidInit+0xea>
 7f6:	9b 01       	movw	r18, r22
 7f8:	20 95       	com	r18
 7fa:	29 23       	and	r18, r25
 7fc:	24 bb       	out	0x14, r18	; 20
 7fe:	23 c0       	rjmp	.+70     	; 0x846 <__DATA_REGION_LENGTH__+0x46>
 800:	e8 2f       	mov	r30, r24
 802:	f0 e0       	ldi	r31, 0x00	; 0
 804:	ee 0f       	add	r30, r30
 806:	ff 1f       	adc	r31, r31
 808:	e0 5a       	subi	r30, 0xA0	; 160
 80a:	ff 4f       	sbci	r31, 0xFF	; 255
 80c:	90 81       	ld	r25, Z
 80e:	91 30       	cpi	r25, 0x01	; 1
 810:	69 f4       	brne	.+26     	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
 812:	91 b3       	in	r25, 0x11	; 17
 814:	41 e0       	ldi	r20, 0x01	; 1
 816:	50 e0       	ldi	r21, 0x00	; 0
 818:	ba 01       	movw	r22, r20
 81a:	02 c0       	rjmp	.+4      	; 0x820 <__DATA_REGION_LENGTH__+0x20>
 81c:	66 0f       	add	r22, r22
 81e:	77 1f       	adc	r23, r23
 820:	2a 95       	dec	r18
 822:	e2 f7       	brpl	.-8      	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
 824:	9b 01       	movw	r18, r22
 826:	29 2b       	or	r18, r25
 828:	21 bb       	out	0x11, r18	; 17
 82a:	0d c0       	rjmp	.+26     	; 0x846 <__DATA_REGION_LENGTH__+0x46>
 82c:	91 b3       	in	r25, 0x11	; 17
 82e:	41 e0       	ldi	r20, 0x01	; 1
 830:	50 e0       	ldi	r21, 0x00	; 0
 832:	ba 01       	movw	r22, r20
 834:	02 c0       	rjmp	.+4      	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
 836:	66 0f       	add	r22, r22
 838:	77 1f       	adc	r23, r23
 83a:	2a 95       	dec	r18
 83c:	e2 f7       	brpl	.-8      	; 0x836 <__DATA_REGION_LENGTH__+0x36>
 83e:	9b 01       	movw	r18, r22
 840:	20 95       	com	r18
 842:	29 23       	and	r18, r25
 844:	21 bb       	out	0x11, r18	; 17
 846:	8f 5f       	subi	r24, 0xFF	; 255
 848:	80 32       	cpi	r24, 0x20	; 32
 84a:	08 f4       	brcc	.+2      	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
 84c:	5d cf       	rjmp	.-326    	; 0x708 <MDIO_vidInit+0x4>
 84e:	08 95       	ret

00000850 <UART_init>:
 850:	8a b1       	in	r24, 0x0a	; 10
 852:	8f 77       	andi	r24, 0x7F	; 127
 854:	8a b9       	out	0x0a, r24	; 10
 856:	8a b1       	in	r24, 0x0a	; 10
 858:	8f 7b       	andi	r24, 0xBF	; 191
 85a:	8a b9       	out	0x0a, r24	; 10
 85c:	8a b1       	in	r24, 0x0a	; 10
 85e:	8f 7d       	andi	r24, 0xDF	; 223
 860:	8a b9       	out	0x0a, r24	; 10
 862:	8a b1       	in	r24, 0x0a	; 10
 864:	88 60       	ori	r24, 0x08	; 8
 866:	8a b9       	out	0x0a, r24	; 10
 868:	8a b1       	in	r24, 0x0a	; 10
 86a:	80 61       	ori	r24, 0x10	; 16
 86c:	8a b9       	out	0x0a, r24	; 10
 86e:	8a b1       	in	r24, 0x0a	; 10
 870:	8b 7f       	andi	r24, 0xFB	; 251
 872:	8a b9       	out	0x0a, r24	; 10
 874:	80 b5       	in	r24, 0x20	; 32
 876:	80 68       	ori	r24, 0x80	; 128
 878:	80 bd       	out	0x20, r24	; 32
 87a:	80 b5       	in	r24, 0x20	; 32
 87c:	8f 7b       	andi	r24, 0xBF	; 191
 87e:	80 bd       	out	0x20, r24	; 32
 880:	80 b5       	in	r24, 0x20	; 32
 882:	8f 7e       	andi	r24, 0xEF	; 239
 884:	80 bd       	out	0x20, r24	; 32
 886:	80 b5       	in	r24, 0x20	; 32
 888:	8f 7d       	andi	r24, 0xDF	; 223
 88a:	80 bd       	out	0x20, r24	; 32
 88c:	80 b5       	in	r24, 0x20	; 32
 88e:	87 7f       	andi	r24, 0xF7	; 247
 890:	80 bd       	out	0x20, r24	; 32
 892:	80 b5       	in	r24, 0x20	; 32
 894:	82 60       	ori	r24, 0x02	; 2
 896:	80 bd       	out	0x20, r24	; 32
 898:	80 b5       	in	r24, 0x20	; 32
 89a:	84 60       	ori	r24, 0x04	; 4
 89c:	80 bd       	out	0x20, r24	; 32
 89e:	80 b5       	in	r24, 0x20	; 32
 8a0:	8e 7f       	andi	r24, 0xFE	; 254
 8a2:	80 bd       	out	0x20, r24	; 32
 8a4:	8b b1       	in	r24, 0x0b	; 11
 8a6:	8d 7f       	andi	r24, 0xFD	; 253
 8a8:	8b b9       	out	0x0b, r24	; 11
 8aa:	87 e6       	ldi	r24, 0x67	; 103
 8ac:	89 b9       	out	0x09, r24	; 9
 8ae:	10 bc       	out	0x20, r1	; 32
 8b0:	08 95       	ret

000008b2 <UART_TxChar>:
 8b2:	5d 9b       	sbis	0x0b, 5	; 11
 8b4:	fe cf       	rjmp	.-4      	; 0x8b2 <UART_TxChar>
 8b6:	8c b9       	out	0x0c, r24	; 12
 8b8:	08 95       	ret

000008ba <__subsf3>:
 8ba:	50 58       	subi	r21, 0x80	; 128

000008bc <__addsf3>:
 8bc:	bb 27       	eor	r27, r27
 8be:	aa 27       	eor	r26, r26
 8c0:	0e 94 75 04 	call	0x8ea	; 0x8ea <__addsf3x>
 8c4:	0c 94 b9 05 	jmp	0xb72	; 0xb72 <__fp_round>
 8c8:	0e 94 ab 05 	call	0xb56	; 0xb56 <__fp_pscA>
 8cc:	38 f0       	brcs	.+14     	; 0x8dc <__addsf3+0x20>
 8ce:	0e 94 b2 05 	call	0xb64	; 0xb64 <__fp_pscB>
 8d2:	20 f0       	brcs	.+8      	; 0x8dc <__addsf3+0x20>
 8d4:	39 f4       	brne	.+14     	; 0x8e4 <__addsf3+0x28>
 8d6:	9f 3f       	cpi	r25, 0xFF	; 255
 8d8:	19 f4       	brne	.+6      	; 0x8e0 <__addsf3+0x24>
 8da:	26 f4       	brtc	.+8      	; 0x8e4 <__addsf3+0x28>
 8dc:	0c 94 a8 05 	jmp	0xb50	; 0xb50 <__fp_nan>
 8e0:	0e f4       	brtc	.+2      	; 0x8e4 <__addsf3+0x28>
 8e2:	e0 95       	com	r30
 8e4:	e7 fb       	bst	r30, 7
 8e6:	0c 94 a2 05 	jmp	0xb44	; 0xb44 <__fp_inf>

000008ea <__addsf3x>:
 8ea:	e9 2f       	mov	r30, r25
 8ec:	0e 94 ca 05 	call	0xb94	; 0xb94 <__fp_split3>
 8f0:	58 f3       	brcs	.-42     	; 0x8c8 <__addsf3+0xc>
 8f2:	ba 17       	cp	r27, r26
 8f4:	62 07       	cpc	r22, r18
 8f6:	73 07       	cpc	r23, r19
 8f8:	84 07       	cpc	r24, r20
 8fa:	95 07       	cpc	r25, r21
 8fc:	20 f0       	brcs	.+8      	; 0x906 <__addsf3x+0x1c>
 8fe:	79 f4       	brne	.+30     	; 0x91e <__addsf3x+0x34>
 900:	a6 f5       	brtc	.+104    	; 0x96a <__addsf3x+0x80>
 902:	0c 94 ec 05 	jmp	0xbd8	; 0xbd8 <__fp_zero>
 906:	0e f4       	brtc	.+2      	; 0x90a <__addsf3x+0x20>
 908:	e0 95       	com	r30
 90a:	0b 2e       	mov	r0, r27
 90c:	ba 2f       	mov	r27, r26
 90e:	a0 2d       	mov	r26, r0
 910:	0b 01       	movw	r0, r22
 912:	b9 01       	movw	r22, r18
 914:	90 01       	movw	r18, r0
 916:	0c 01       	movw	r0, r24
 918:	ca 01       	movw	r24, r20
 91a:	a0 01       	movw	r20, r0
 91c:	11 24       	eor	r1, r1
 91e:	ff 27       	eor	r31, r31
 920:	59 1b       	sub	r21, r25
 922:	99 f0       	breq	.+38     	; 0x94a <__addsf3x+0x60>
 924:	59 3f       	cpi	r21, 0xF9	; 249
 926:	50 f4       	brcc	.+20     	; 0x93c <__addsf3x+0x52>
 928:	50 3e       	cpi	r21, 0xE0	; 224
 92a:	68 f1       	brcs	.+90     	; 0x986 <__addsf3x+0x9c>
 92c:	1a 16       	cp	r1, r26
 92e:	f0 40       	sbci	r31, 0x00	; 0
 930:	a2 2f       	mov	r26, r18
 932:	23 2f       	mov	r18, r19
 934:	34 2f       	mov	r19, r20
 936:	44 27       	eor	r20, r20
 938:	58 5f       	subi	r21, 0xF8	; 248
 93a:	f3 cf       	rjmp	.-26     	; 0x922 <__addsf3x+0x38>
 93c:	46 95       	lsr	r20
 93e:	37 95       	ror	r19
 940:	27 95       	ror	r18
 942:	a7 95       	ror	r26
 944:	f0 40       	sbci	r31, 0x00	; 0
 946:	53 95       	inc	r21
 948:	c9 f7       	brne	.-14     	; 0x93c <__addsf3x+0x52>
 94a:	7e f4       	brtc	.+30     	; 0x96a <__addsf3x+0x80>
 94c:	1f 16       	cp	r1, r31
 94e:	ba 0b       	sbc	r27, r26
 950:	62 0b       	sbc	r22, r18
 952:	73 0b       	sbc	r23, r19
 954:	84 0b       	sbc	r24, r20
 956:	ba f0       	brmi	.+46     	; 0x986 <__addsf3x+0x9c>
 958:	91 50       	subi	r25, 0x01	; 1
 95a:	a1 f0       	breq	.+40     	; 0x984 <__addsf3x+0x9a>
 95c:	ff 0f       	add	r31, r31
 95e:	bb 1f       	adc	r27, r27
 960:	66 1f       	adc	r22, r22
 962:	77 1f       	adc	r23, r23
 964:	88 1f       	adc	r24, r24
 966:	c2 f7       	brpl	.-16     	; 0x958 <__addsf3x+0x6e>
 968:	0e c0       	rjmp	.+28     	; 0x986 <__addsf3x+0x9c>
 96a:	ba 0f       	add	r27, r26
 96c:	62 1f       	adc	r22, r18
 96e:	73 1f       	adc	r23, r19
 970:	84 1f       	adc	r24, r20
 972:	48 f4       	brcc	.+18     	; 0x986 <__addsf3x+0x9c>
 974:	87 95       	ror	r24
 976:	77 95       	ror	r23
 978:	67 95       	ror	r22
 97a:	b7 95       	ror	r27
 97c:	f7 95       	ror	r31
 97e:	9e 3f       	cpi	r25, 0xFE	; 254
 980:	08 f0       	brcs	.+2      	; 0x984 <__addsf3x+0x9a>
 982:	b0 cf       	rjmp	.-160    	; 0x8e4 <__addsf3+0x28>
 984:	93 95       	inc	r25
 986:	88 0f       	add	r24, r24
 988:	08 f0       	brcs	.+2      	; 0x98c <__addsf3x+0xa2>
 98a:	99 27       	eor	r25, r25
 98c:	ee 0f       	add	r30, r30
 98e:	97 95       	ror	r25
 990:	87 95       	ror	r24
 992:	08 95       	ret

00000994 <__cmpsf2>:
 994:	0e 94 7e 05 	call	0xafc	; 0xafc <__fp_cmp>
 998:	08 f4       	brcc	.+2      	; 0x99c <__cmpsf2+0x8>
 99a:	81 e0       	ldi	r24, 0x01	; 1
 99c:	08 95       	ret

0000099e <__divsf3>:
 99e:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__divsf3x>
 9a2:	0c 94 b9 05 	jmp	0xb72	; 0xb72 <__fp_round>
 9a6:	0e 94 b2 05 	call	0xb64	; 0xb64 <__fp_pscB>
 9aa:	58 f0       	brcs	.+22     	; 0x9c2 <__divsf3+0x24>
 9ac:	0e 94 ab 05 	call	0xb56	; 0xb56 <__fp_pscA>
 9b0:	40 f0       	brcs	.+16     	; 0x9c2 <__divsf3+0x24>
 9b2:	29 f4       	brne	.+10     	; 0x9be <__divsf3+0x20>
 9b4:	5f 3f       	cpi	r21, 0xFF	; 255
 9b6:	29 f0       	breq	.+10     	; 0x9c2 <__divsf3+0x24>
 9b8:	0c 94 a2 05 	jmp	0xb44	; 0xb44 <__fp_inf>
 9bc:	51 11       	cpse	r21, r1
 9be:	0c 94 ed 05 	jmp	0xbda	; 0xbda <__fp_szero>
 9c2:	0c 94 a8 05 	jmp	0xb50	; 0xb50 <__fp_nan>

000009c6 <__divsf3x>:
 9c6:	0e 94 ca 05 	call	0xb94	; 0xb94 <__fp_split3>
 9ca:	68 f3       	brcs	.-38     	; 0x9a6 <__divsf3+0x8>

000009cc <__divsf3_pse>:
 9cc:	99 23       	and	r25, r25
 9ce:	b1 f3       	breq	.-20     	; 0x9bc <__divsf3+0x1e>
 9d0:	55 23       	and	r21, r21
 9d2:	91 f3       	breq	.-28     	; 0x9b8 <__divsf3+0x1a>
 9d4:	95 1b       	sub	r25, r21
 9d6:	55 0b       	sbc	r21, r21
 9d8:	bb 27       	eor	r27, r27
 9da:	aa 27       	eor	r26, r26
 9dc:	62 17       	cp	r22, r18
 9de:	73 07       	cpc	r23, r19
 9e0:	84 07       	cpc	r24, r20
 9e2:	38 f0       	brcs	.+14     	; 0x9f2 <__divsf3_pse+0x26>
 9e4:	9f 5f       	subi	r25, 0xFF	; 255
 9e6:	5f 4f       	sbci	r21, 0xFF	; 255
 9e8:	22 0f       	add	r18, r18
 9ea:	33 1f       	adc	r19, r19
 9ec:	44 1f       	adc	r20, r20
 9ee:	aa 1f       	adc	r26, r26
 9f0:	a9 f3       	breq	.-22     	; 0x9dc <__divsf3_pse+0x10>
 9f2:	35 d0       	rcall	.+106    	; 0xa5e <__divsf3_pse+0x92>
 9f4:	0e 2e       	mov	r0, r30
 9f6:	3a f0       	brmi	.+14     	; 0xa06 <__divsf3_pse+0x3a>
 9f8:	e0 e8       	ldi	r30, 0x80	; 128
 9fa:	32 d0       	rcall	.+100    	; 0xa60 <__divsf3_pse+0x94>
 9fc:	91 50       	subi	r25, 0x01	; 1
 9fe:	50 40       	sbci	r21, 0x00	; 0
 a00:	e6 95       	lsr	r30
 a02:	00 1c       	adc	r0, r0
 a04:	ca f7       	brpl	.-14     	; 0x9f8 <__divsf3_pse+0x2c>
 a06:	2b d0       	rcall	.+86     	; 0xa5e <__divsf3_pse+0x92>
 a08:	fe 2f       	mov	r31, r30
 a0a:	29 d0       	rcall	.+82     	; 0xa5e <__divsf3_pse+0x92>
 a0c:	66 0f       	add	r22, r22
 a0e:	77 1f       	adc	r23, r23
 a10:	88 1f       	adc	r24, r24
 a12:	bb 1f       	adc	r27, r27
 a14:	26 17       	cp	r18, r22
 a16:	37 07       	cpc	r19, r23
 a18:	48 07       	cpc	r20, r24
 a1a:	ab 07       	cpc	r26, r27
 a1c:	b0 e8       	ldi	r27, 0x80	; 128
 a1e:	09 f0       	breq	.+2      	; 0xa22 <__divsf3_pse+0x56>
 a20:	bb 0b       	sbc	r27, r27
 a22:	80 2d       	mov	r24, r0
 a24:	bf 01       	movw	r22, r30
 a26:	ff 27       	eor	r31, r31
 a28:	93 58       	subi	r25, 0x83	; 131
 a2a:	5f 4f       	sbci	r21, 0xFF	; 255
 a2c:	3a f0       	brmi	.+14     	; 0xa3c <__divsf3_pse+0x70>
 a2e:	9e 3f       	cpi	r25, 0xFE	; 254
 a30:	51 05       	cpc	r21, r1
 a32:	78 f0       	brcs	.+30     	; 0xa52 <__divsf3_pse+0x86>
 a34:	0c 94 a2 05 	jmp	0xb44	; 0xb44 <__fp_inf>
 a38:	0c 94 ed 05 	jmp	0xbda	; 0xbda <__fp_szero>
 a3c:	5f 3f       	cpi	r21, 0xFF	; 255
 a3e:	e4 f3       	brlt	.-8      	; 0xa38 <__divsf3_pse+0x6c>
 a40:	98 3e       	cpi	r25, 0xE8	; 232
 a42:	d4 f3       	brlt	.-12     	; 0xa38 <__divsf3_pse+0x6c>
 a44:	86 95       	lsr	r24
 a46:	77 95       	ror	r23
 a48:	67 95       	ror	r22
 a4a:	b7 95       	ror	r27
 a4c:	f7 95       	ror	r31
 a4e:	9f 5f       	subi	r25, 0xFF	; 255
 a50:	c9 f7       	brne	.-14     	; 0xa44 <__divsf3_pse+0x78>
 a52:	88 0f       	add	r24, r24
 a54:	91 1d       	adc	r25, r1
 a56:	96 95       	lsr	r25
 a58:	87 95       	ror	r24
 a5a:	97 f9       	bld	r25, 7
 a5c:	08 95       	ret
 a5e:	e1 e0       	ldi	r30, 0x01	; 1
 a60:	66 0f       	add	r22, r22
 a62:	77 1f       	adc	r23, r23
 a64:	88 1f       	adc	r24, r24
 a66:	bb 1f       	adc	r27, r27
 a68:	62 17       	cp	r22, r18
 a6a:	73 07       	cpc	r23, r19
 a6c:	84 07       	cpc	r24, r20
 a6e:	ba 07       	cpc	r27, r26
 a70:	20 f0       	brcs	.+8      	; 0xa7a <__divsf3_pse+0xae>
 a72:	62 1b       	sub	r22, r18
 a74:	73 0b       	sbc	r23, r19
 a76:	84 0b       	sbc	r24, r20
 a78:	ba 0b       	sbc	r27, r26
 a7a:	ee 1f       	adc	r30, r30
 a7c:	88 f7       	brcc	.-30     	; 0xa60 <__divsf3_pse+0x94>
 a7e:	e0 95       	com	r30
 a80:	08 95       	ret

00000a82 <__floatunsisf>:
 a82:	e8 94       	clt
 a84:	09 c0       	rjmp	.+18     	; 0xa98 <__floatsisf+0x12>

00000a86 <__floatsisf>:
 a86:	97 fb       	bst	r25, 7
 a88:	3e f4       	brtc	.+14     	; 0xa98 <__floatsisf+0x12>
 a8a:	90 95       	com	r25
 a8c:	80 95       	com	r24
 a8e:	70 95       	com	r23
 a90:	61 95       	neg	r22
 a92:	7f 4f       	sbci	r23, 0xFF	; 255
 a94:	8f 4f       	sbci	r24, 0xFF	; 255
 a96:	9f 4f       	sbci	r25, 0xFF	; 255
 a98:	99 23       	and	r25, r25
 a9a:	a9 f0       	breq	.+42     	; 0xac6 <__floatsisf+0x40>
 a9c:	f9 2f       	mov	r31, r25
 a9e:	96 e9       	ldi	r25, 0x96	; 150
 aa0:	bb 27       	eor	r27, r27
 aa2:	93 95       	inc	r25
 aa4:	f6 95       	lsr	r31
 aa6:	87 95       	ror	r24
 aa8:	77 95       	ror	r23
 aaa:	67 95       	ror	r22
 aac:	b7 95       	ror	r27
 aae:	f1 11       	cpse	r31, r1
 ab0:	f8 cf       	rjmp	.-16     	; 0xaa2 <__floatsisf+0x1c>
 ab2:	fa f4       	brpl	.+62     	; 0xaf2 <__floatsisf+0x6c>
 ab4:	bb 0f       	add	r27, r27
 ab6:	11 f4       	brne	.+4      	; 0xabc <__floatsisf+0x36>
 ab8:	60 ff       	sbrs	r22, 0
 aba:	1b c0       	rjmp	.+54     	; 0xaf2 <__floatsisf+0x6c>
 abc:	6f 5f       	subi	r22, 0xFF	; 255
 abe:	7f 4f       	sbci	r23, 0xFF	; 255
 ac0:	8f 4f       	sbci	r24, 0xFF	; 255
 ac2:	9f 4f       	sbci	r25, 0xFF	; 255
 ac4:	16 c0       	rjmp	.+44     	; 0xaf2 <__floatsisf+0x6c>
 ac6:	88 23       	and	r24, r24
 ac8:	11 f0       	breq	.+4      	; 0xace <__floatsisf+0x48>
 aca:	96 e9       	ldi	r25, 0x96	; 150
 acc:	11 c0       	rjmp	.+34     	; 0xaf0 <__floatsisf+0x6a>
 ace:	77 23       	and	r23, r23
 ad0:	21 f0       	breq	.+8      	; 0xada <__floatsisf+0x54>
 ad2:	9e e8       	ldi	r25, 0x8E	; 142
 ad4:	87 2f       	mov	r24, r23
 ad6:	76 2f       	mov	r23, r22
 ad8:	05 c0       	rjmp	.+10     	; 0xae4 <__floatsisf+0x5e>
 ada:	66 23       	and	r22, r22
 adc:	71 f0       	breq	.+28     	; 0xafa <__floatsisf+0x74>
 ade:	96 e8       	ldi	r25, 0x86	; 134
 ae0:	86 2f       	mov	r24, r22
 ae2:	70 e0       	ldi	r23, 0x00	; 0
 ae4:	60 e0       	ldi	r22, 0x00	; 0
 ae6:	2a f0       	brmi	.+10     	; 0xaf2 <__floatsisf+0x6c>
 ae8:	9a 95       	dec	r25
 aea:	66 0f       	add	r22, r22
 aec:	77 1f       	adc	r23, r23
 aee:	88 1f       	adc	r24, r24
 af0:	da f7       	brpl	.-10     	; 0xae8 <__floatsisf+0x62>
 af2:	88 0f       	add	r24, r24
 af4:	96 95       	lsr	r25
 af6:	87 95       	ror	r24
 af8:	97 f9       	bld	r25, 7
 afa:	08 95       	ret

00000afc <__fp_cmp>:
 afc:	99 0f       	add	r25, r25
 afe:	00 08       	sbc	r0, r0
 b00:	55 0f       	add	r21, r21
 b02:	aa 0b       	sbc	r26, r26
 b04:	e0 e8       	ldi	r30, 0x80	; 128
 b06:	fe ef       	ldi	r31, 0xFE	; 254
 b08:	16 16       	cp	r1, r22
 b0a:	17 06       	cpc	r1, r23
 b0c:	e8 07       	cpc	r30, r24
 b0e:	f9 07       	cpc	r31, r25
 b10:	c0 f0       	brcs	.+48     	; 0xb42 <__fp_cmp+0x46>
 b12:	12 16       	cp	r1, r18
 b14:	13 06       	cpc	r1, r19
 b16:	e4 07       	cpc	r30, r20
 b18:	f5 07       	cpc	r31, r21
 b1a:	98 f0       	brcs	.+38     	; 0xb42 <__fp_cmp+0x46>
 b1c:	62 1b       	sub	r22, r18
 b1e:	73 0b       	sbc	r23, r19
 b20:	84 0b       	sbc	r24, r20
 b22:	95 0b       	sbc	r25, r21
 b24:	39 f4       	brne	.+14     	; 0xb34 <__fp_cmp+0x38>
 b26:	0a 26       	eor	r0, r26
 b28:	61 f0       	breq	.+24     	; 0xb42 <__fp_cmp+0x46>
 b2a:	23 2b       	or	r18, r19
 b2c:	24 2b       	or	r18, r20
 b2e:	25 2b       	or	r18, r21
 b30:	21 f4       	brne	.+8      	; 0xb3a <__fp_cmp+0x3e>
 b32:	08 95       	ret
 b34:	0a 26       	eor	r0, r26
 b36:	09 f4       	brne	.+2      	; 0xb3a <__fp_cmp+0x3e>
 b38:	a1 40       	sbci	r26, 0x01	; 1
 b3a:	a6 95       	lsr	r26
 b3c:	8f ef       	ldi	r24, 0xFF	; 255
 b3e:	81 1d       	adc	r24, r1
 b40:	81 1d       	adc	r24, r1
 b42:	08 95       	ret

00000b44 <__fp_inf>:
 b44:	97 f9       	bld	r25, 7
 b46:	9f 67       	ori	r25, 0x7F	; 127
 b48:	80 e8       	ldi	r24, 0x80	; 128
 b4a:	70 e0       	ldi	r23, 0x00	; 0
 b4c:	60 e0       	ldi	r22, 0x00	; 0
 b4e:	08 95       	ret

00000b50 <__fp_nan>:
 b50:	9f ef       	ldi	r25, 0xFF	; 255
 b52:	80 ec       	ldi	r24, 0xC0	; 192
 b54:	08 95       	ret

00000b56 <__fp_pscA>:
 b56:	00 24       	eor	r0, r0
 b58:	0a 94       	dec	r0
 b5a:	16 16       	cp	r1, r22
 b5c:	17 06       	cpc	r1, r23
 b5e:	18 06       	cpc	r1, r24
 b60:	09 06       	cpc	r0, r25
 b62:	08 95       	ret

00000b64 <__fp_pscB>:
 b64:	00 24       	eor	r0, r0
 b66:	0a 94       	dec	r0
 b68:	12 16       	cp	r1, r18
 b6a:	13 06       	cpc	r1, r19
 b6c:	14 06       	cpc	r1, r20
 b6e:	05 06       	cpc	r0, r21
 b70:	08 95       	ret

00000b72 <__fp_round>:
 b72:	09 2e       	mov	r0, r25
 b74:	03 94       	inc	r0
 b76:	00 0c       	add	r0, r0
 b78:	11 f4       	brne	.+4      	; 0xb7e <__fp_round+0xc>
 b7a:	88 23       	and	r24, r24
 b7c:	52 f0       	brmi	.+20     	; 0xb92 <__fp_round+0x20>
 b7e:	bb 0f       	add	r27, r27
 b80:	40 f4       	brcc	.+16     	; 0xb92 <__fp_round+0x20>
 b82:	bf 2b       	or	r27, r31
 b84:	11 f4       	brne	.+4      	; 0xb8a <__fp_round+0x18>
 b86:	60 ff       	sbrs	r22, 0
 b88:	04 c0       	rjmp	.+8      	; 0xb92 <__fp_round+0x20>
 b8a:	6f 5f       	subi	r22, 0xFF	; 255
 b8c:	7f 4f       	sbci	r23, 0xFF	; 255
 b8e:	8f 4f       	sbci	r24, 0xFF	; 255
 b90:	9f 4f       	sbci	r25, 0xFF	; 255
 b92:	08 95       	ret

00000b94 <__fp_split3>:
 b94:	57 fd       	sbrc	r21, 7
 b96:	90 58       	subi	r25, 0x80	; 128
 b98:	44 0f       	add	r20, r20
 b9a:	55 1f       	adc	r21, r21
 b9c:	59 f0       	breq	.+22     	; 0xbb4 <__fp_splitA+0x10>
 b9e:	5f 3f       	cpi	r21, 0xFF	; 255
 ba0:	71 f0       	breq	.+28     	; 0xbbe <__fp_splitA+0x1a>
 ba2:	47 95       	ror	r20

00000ba4 <__fp_splitA>:
 ba4:	88 0f       	add	r24, r24
 ba6:	97 fb       	bst	r25, 7
 ba8:	99 1f       	adc	r25, r25
 baa:	61 f0       	breq	.+24     	; 0xbc4 <__fp_splitA+0x20>
 bac:	9f 3f       	cpi	r25, 0xFF	; 255
 bae:	79 f0       	breq	.+30     	; 0xbce <__fp_splitA+0x2a>
 bb0:	87 95       	ror	r24
 bb2:	08 95       	ret
 bb4:	12 16       	cp	r1, r18
 bb6:	13 06       	cpc	r1, r19
 bb8:	14 06       	cpc	r1, r20
 bba:	55 1f       	adc	r21, r21
 bbc:	f2 cf       	rjmp	.-28     	; 0xba2 <__fp_split3+0xe>
 bbe:	46 95       	lsr	r20
 bc0:	f1 df       	rcall	.-30     	; 0xba4 <__fp_splitA>
 bc2:	08 c0       	rjmp	.+16     	; 0xbd4 <__fp_splitA+0x30>
 bc4:	16 16       	cp	r1, r22
 bc6:	17 06       	cpc	r1, r23
 bc8:	18 06       	cpc	r1, r24
 bca:	99 1f       	adc	r25, r25
 bcc:	f1 cf       	rjmp	.-30     	; 0xbb0 <__fp_splitA+0xc>
 bce:	86 95       	lsr	r24
 bd0:	71 05       	cpc	r23, r1
 bd2:	61 05       	cpc	r22, r1
 bd4:	08 94       	sec
 bd6:	08 95       	ret

00000bd8 <__fp_zero>:
 bd8:	e8 94       	clt

00000bda <__fp_szero>:
 bda:	bb 27       	eor	r27, r27
 bdc:	66 27       	eor	r22, r22
 bde:	77 27       	eor	r23, r23
 be0:	cb 01       	movw	r24, r22
 be2:	97 f9       	bld	r25, 7
 be4:	08 95       	ret

00000be6 <__gesf2>:
 be6:	0e 94 7e 05 	call	0xafc	; 0xafc <__fp_cmp>
 bea:	08 f4       	brcc	.+2      	; 0xbee <__gesf2+0x8>
 bec:	8f ef       	ldi	r24, 0xFF	; 255
 bee:	08 95       	ret

00000bf0 <__mulsf3>:
 bf0:	0e 94 0b 06 	call	0xc16	; 0xc16 <__mulsf3x>
 bf4:	0c 94 b9 05 	jmp	0xb72	; 0xb72 <__fp_round>
 bf8:	0e 94 ab 05 	call	0xb56	; 0xb56 <__fp_pscA>
 bfc:	38 f0       	brcs	.+14     	; 0xc0c <__mulsf3+0x1c>
 bfe:	0e 94 b2 05 	call	0xb64	; 0xb64 <__fp_pscB>
 c02:	20 f0       	brcs	.+8      	; 0xc0c <__mulsf3+0x1c>
 c04:	95 23       	and	r25, r21
 c06:	11 f0       	breq	.+4      	; 0xc0c <__mulsf3+0x1c>
 c08:	0c 94 a2 05 	jmp	0xb44	; 0xb44 <__fp_inf>
 c0c:	0c 94 a8 05 	jmp	0xb50	; 0xb50 <__fp_nan>
 c10:	11 24       	eor	r1, r1
 c12:	0c 94 ed 05 	jmp	0xbda	; 0xbda <__fp_szero>

00000c16 <__mulsf3x>:
 c16:	0e 94 ca 05 	call	0xb94	; 0xb94 <__fp_split3>
 c1a:	70 f3       	brcs	.-36     	; 0xbf8 <__mulsf3+0x8>

00000c1c <__mulsf3_pse>:
 c1c:	95 9f       	mul	r25, r21
 c1e:	c1 f3       	breq	.-16     	; 0xc10 <__mulsf3+0x20>
 c20:	95 0f       	add	r25, r21
 c22:	50 e0       	ldi	r21, 0x00	; 0
 c24:	55 1f       	adc	r21, r21
 c26:	62 9f       	mul	r22, r18
 c28:	f0 01       	movw	r30, r0
 c2a:	72 9f       	mul	r23, r18
 c2c:	bb 27       	eor	r27, r27
 c2e:	f0 0d       	add	r31, r0
 c30:	b1 1d       	adc	r27, r1
 c32:	63 9f       	mul	r22, r19
 c34:	aa 27       	eor	r26, r26
 c36:	f0 0d       	add	r31, r0
 c38:	b1 1d       	adc	r27, r1
 c3a:	aa 1f       	adc	r26, r26
 c3c:	64 9f       	mul	r22, r20
 c3e:	66 27       	eor	r22, r22
 c40:	b0 0d       	add	r27, r0
 c42:	a1 1d       	adc	r26, r1
 c44:	66 1f       	adc	r22, r22
 c46:	82 9f       	mul	r24, r18
 c48:	22 27       	eor	r18, r18
 c4a:	b0 0d       	add	r27, r0
 c4c:	a1 1d       	adc	r26, r1
 c4e:	62 1f       	adc	r22, r18
 c50:	73 9f       	mul	r23, r19
 c52:	b0 0d       	add	r27, r0
 c54:	a1 1d       	adc	r26, r1
 c56:	62 1f       	adc	r22, r18
 c58:	83 9f       	mul	r24, r19
 c5a:	a0 0d       	add	r26, r0
 c5c:	61 1d       	adc	r22, r1
 c5e:	22 1f       	adc	r18, r18
 c60:	74 9f       	mul	r23, r20
 c62:	33 27       	eor	r19, r19
 c64:	a0 0d       	add	r26, r0
 c66:	61 1d       	adc	r22, r1
 c68:	23 1f       	adc	r18, r19
 c6a:	84 9f       	mul	r24, r20
 c6c:	60 0d       	add	r22, r0
 c6e:	21 1d       	adc	r18, r1
 c70:	82 2f       	mov	r24, r18
 c72:	76 2f       	mov	r23, r22
 c74:	6a 2f       	mov	r22, r26
 c76:	11 24       	eor	r1, r1
 c78:	9f 57       	subi	r25, 0x7F	; 127
 c7a:	50 40       	sbci	r21, 0x00	; 0
 c7c:	9a f0       	brmi	.+38     	; 0xca4 <__mulsf3_pse+0x88>
 c7e:	f1 f0       	breq	.+60     	; 0xcbc <__mulsf3_pse+0xa0>
 c80:	88 23       	and	r24, r24
 c82:	4a f0       	brmi	.+18     	; 0xc96 <__mulsf3_pse+0x7a>
 c84:	ee 0f       	add	r30, r30
 c86:	ff 1f       	adc	r31, r31
 c88:	bb 1f       	adc	r27, r27
 c8a:	66 1f       	adc	r22, r22
 c8c:	77 1f       	adc	r23, r23
 c8e:	88 1f       	adc	r24, r24
 c90:	91 50       	subi	r25, 0x01	; 1
 c92:	50 40       	sbci	r21, 0x00	; 0
 c94:	a9 f7       	brne	.-22     	; 0xc80 <__mulsf3_pse+0x64>
 c96:	9e 3f       	cpi	r25, 0xFE	; 254
 c98:	51 05       	cpc	r21, r1
 c9a:	80 f0       	brcs	.+32     	; 0xcbc <__mulsf3_pse+0xa0>
 c9c:	0c 94 a2 05 	jmp	0xb44	; 0xb44 <__fp_inf>
 ca0:	0c 94 ed 05 	jmp	0xbda	; 0xbda <__fp_szero>
 ca4:	5f 3f       	cpi	r21, 0xFF	; 255
 ca6:	e4 f3       	brlt	.-8      	; 0xca0 <__mulsf3_pse+0x84>
 ca8:	98 3e       	cpi	r25, 0xE8	; 232
 caa:	d4 f3       	brlt	.-12     	; 0xca0 <__mulsf3_pse+0x84>
 cac:	86 95       	lsr	r24
 cae:	77 95       	ror	r23
 cb0:	67 95       	ror	r22
 cb2:	b7 95       	ror	r27
 cb4:	f7 95       	ror	r31
 cb6:	e7 95       	ror	r30
 cb8:	9f 5f       	subi	r25, 0xFF	; 255
 cba:	c1 f7       	brne	.-16     	; 0xcac <__mulsf3_pse+0x90>
 cbc:	fe 2b       	or	r31, r30
 cbe:	88 0f       	add	r24, r24
 cc0:	91 1d       	adc	r25, r1
 cc2:	96 95       	lsr	r25
 cc4:	87 95       	ror	r24
 cc6:	97 f9       	bld	r25, 7
 cc8:	08 95       	ret

00000cca <__udivmodsi4>:
 cca:	a1 e2       	ldi	r26, 0x21	; 33
 ccc:	1a 2e       	mov	r1, r26
 cce:	aa 1b       	sub	r26, r26
 cd0:	bb 1b       	sub	r27, r27
 cd2:	fd 01       	movw	r30, r26
 cd4:	0d c0       	rjmp	.+26     	; 0xcf0 <__udivmodsi4_ep>

00000cd6 <__udivmodsi4_loop>:
 cd6:	aa 1f       	adc	r26, r26
 cd8:	bb 1f       	adc	r27, r27
 cda:	ee 1f       	adc	r30, r30
 cdc:	ff 1f       	adc	r31, r31
 cde:	a2 17       	cp	r26, r18
 ce0:	b3 07       	cpc	r27, r19
 ce2:	e4 07       	cpc	r30, r20
 ce4:	f5 07       	cpc	r31, r21
 ce6:	20 f0       	brcs	.+8      	; 0xcf0 <__udivmodsi4_ep>
 ce8:	a2 1b       	sub	r26, r18
 cea:	b3 0b       	sbc	r27, r19
 cec:	e4 0b       	sbc	r30, r20
 cee:	f5 0b       	sbc	r31, r21

00000cf0 <__udivmodsi4_ep>:
 cf0:	66 1f       	adc	r22, r22
 cf2:	77 1f       	adc	r23, r23
 cf4:	88 1f       	adc	r24, r24
 cf6:	99 1f       	adc	r25, r25
 cf8:	1a 94       	dec	r1
 cfa:	69 f7       	brne	.-38     	; 0xcd6 <__udivmodsi4_loop>
 cfc:	60 95       	com	r22
 cfe:	70 95       	com	r23
 d00:	80 95       	com	r24
 d02:	90 95       	com	r25
 d04:	9b 01       	movw	r18, r22
 d06:	ac 01       	movw	r20, r24
 d08:	bd 01       	movw	r22, r26
 d0a:	cf 01       	movw	r24, r30
 d0c:	08 95       	ret

00000d0e <__divmodsi4>:
 d0e:	05 2e       	mov	r0, r21
 d10:	97 fb       	bst	r25, 7
 d12:	1e f4       	brtc	.+6      	; 0xd1a <__divmodsi4+0xc>
 d14:	00 94       	com	r0
 d16:	0e 94 9e 06 	call	0xd3c	; 0xd3c <__negsi2>
 d1a:	57 fd       	sbrc	r21, 7
 d1c:	07 d0       	rcall	.+14     	; 0xd2c <__divmodsi4_neg2>
 d1e:	0e 94 65 06 	call	0xcca	; 0xcca <__udivmodsi4>
 d22:	07 fc       	sbrc	r0, 7
 d24:	03 d0       	rcall	.+6      	; 0xd2c <__divmodsi4_neg2>
 d26:	4e f4       	brtc	.+18     	; 0xd3a <__divmodsi4_exit>
 d28:	0c 94 9e 06 	jmp	0xd3c	; 0xd3c <__negsi2>

00000d2c <__divmodsi4_neg2>:
 d2c:	50 95       	com	r21
 d2e:	40 95       	com	r20
 d30:	30 95       	com	r19
 d32:	21 95       	neg	r18
 d34:	3f 4f       	sbci	r19, 0xFF	; 255
 d36:	4f 4f       	sbci	r20, 0xFF	; 255
 d38:	5f 4f       	sbci	r21, 0xFF	; 255

00000d3a <__divmodsi4_exit>:
 d3a:	08 95       	ret

00000d3c <__negsi2>:
 d3c:	90 95       	com	r25
 d3e:	80 95       	com	r24
 d40:	70 95       	com	r23
 d42:	61 95       	neg	r22
 d44:	7f 4f       	sbci	r23, 0xFF	; 255
 d46:	8f 4f       	sbci	r24, 0xFF	; 255
 d48:	9f 4f       	sbci	r25, 0xFF	; 255
 d4a:	08 95       	ret

00000d4c <_exit>:
 d4c:	f8 94       	cli

00000d4e <__stop_program>:
 d4e:	ff cf       	rjmp	.-2      	; 0xd4e <__stop_program>
